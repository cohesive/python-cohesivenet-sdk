{
  "openapi": "3.0.0",
  "info": {
    "version": "4.8",
    "title": "VNS3 Controller API",
    "description": "Cohesive networks VNS3 provides complete control of your network's addresses, routes, rules and edge. Networking does",
    "termsOfService": "https://www.cohesive.net/legal-disclaimer",
    "contact": {
      "name": "Cohesive Networks Solutions team",
      "email": "solutions@cohesive.net",
      "url": "https://docs.cohesive.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://bp-cohesive-demo.s3.amazonaws.com/cohesive-logo.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://bp-cohesive-demo.s3.amazonaws.com/vns3-spec-v4.yaml",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "cohesive.net"
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://vns3-host:8000/api"
    }
  ],
  "tags": [
    {
      "name": "System Administration",
      "description": "Sysadmin functions for system status, device access and system actions"
    },
    {
      "name": "Access",
      "description": "Manage access to VNS3 with API tokens and admin access URLs"
    },
    {
      "name": "Configuration",
      "description": "VNS3 configuration such as licensing, VNS3:Management System, SSL certs and keyset generation"
    },
    {
      "name": "IPsec",
      "description": "Control and manage your IPSec tunnels"
    },
    {
      "name": "Firewall",
      "description": "Functions for managing Firewall rules, subgroups (chains) and IPSets"
    },
    {
      "name": "Routing",
      "description": "Control the network route table"
    },
    {
      "name": "Overlay Network",
      "description": "Configure and control encrypted overlay network"
    },
    {
      "name": "Peering",
      "description": "Manage VNS3 controller peering for mesh topologies"
    },
    {
      "name": "Interfaces",
      "description": "Collection for viewing and editing virtual and system interfaces"
    },
    {
      "name": "Snapshots",
      "description": "Backup management with device snapshots"
    },
    {
      "name": "Network Edge Plugins",
      "description": "Deploy and manage plugin functionality on the edge of the network with containers"
    },
    {
      "name": "BGP",
      "description": "Configure and control Border Gateway Protocol system and peering"
    },
    {
      "name": "Monitoring and Alerting",
      "description": "Setup and view alerts and monitors for feedback and analysis of your network"
    }
  ],
  "paths": {
    "/remote_support": {
      "get": {
        "description": "Get remote support configuration details",
        "summary": "Get remote support",
        "operationId": "getRemoteSupport",
        "tags": [
          "System Administration"
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RemoteSupportConfigResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RemoteSupportConfig",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "enabled": true
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "put": {
        "description": "Enables and disables remote support. Revokes the validity of current  remote support keypair\n",
        "summary": "Update remote support config",
        "operationId": "updateRemoteSupport",
        "tags": [
          "System Administration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateRemoteSupportConfigRequest",
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "True if remote support should be enabled",
                    "type": "boolean"
                  },
                  "revoke_credential": {
                    "description": "True if remote support credential should be revoked",
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "enabled": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RemoteSupportStatusResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RemoteSupportStatus",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "revoke_credential": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "enabled": true,
                  "revoke_credential": false
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347731532179638778333642624237974834407",
                    "message": "enabled is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/remote_support/keypair": {
      "post": {
        "description": "Generating a remote support key which can be shared with Cohesive to provide  access to the internal of the VNS3 Manager remotely as a \"one time key\".  Once Cohesive has used the key it can be revoked and access terminated.\n",
        "summary": "Generate support keypair",
        "operationId": "postGenerateSupportKeypair",
        "tags": [
          "System Administration"
        ],
        "requestBody": {
          "description": "Encrypted passphrase file which will be used to generate an X509 key for  accessing the VNS3 Manager in support mode. These are generated and owned by Cohesive.  Contact support@cohesive.net for an encrypted passphrase file.\n",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SSH key .pem file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347797058992573673734848595852371200179",
                    "message": "Bad encrypted passphrase"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/cloud_data": {
      "get": {
        "description": "Returns cloud-specific data depending upon cloud type. Supports EC2 and GCE. More clouds coming soon.",
        "summary": "Get cloud details",
        "operationId": "getCloudDetails",
        "tags": [
          "System Administration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CloudInfoDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "CloudInfo",
                      "type": "object",
                      "properties": {
                        "cloud_type": {
                          "description": "ec2, gce, azure, hpcloud, centurylink",
                          "type": "string"
                        },
                        "cloud_data": {
                          "oneOf": [
                            {
                              "title": "EC2CloudInfo",
                              "type": "object",
                              "description": "Metadata returned from AWS instance metadata call.  For more, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-retrieval.\n",
                              "additionalProperties": true,
                              "properties": {
                                "accountId": {
                                  "type": "string"
                                },
                                "availabilityZone": {
                                  "type": "string"
                                },
                                "ramdiskId": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "kernelId": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "pendingTime": {
                                  "type": "string"
                                },
                                "architecture": {
                                  "type": "string"
                                },
                                "privateIp": {
                                  "type": "string"
                                },
                                "devpayProductCodes": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "marketplaceProductCodes": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "version": {
                                  "type": "string"
                                },
                                "region": {
                                  "type": "string"
                                },
                                "imageId": {
                                  "type": "string"
                                },
                                "billingProducts": {
                                  "type": "string"
                                },
                                "instanceId": {
                                  "type": "string"
                                },
                                "instanceType": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "title": "GCECloudInfo",
                              "type": "object",
                              "description": "Metadata returned from GCE metadata call. For more, see https://cloud.google.com/compute/docs/storing-retrieving-metadata.",
                              "additionalProperties": true,
                              "properties": {
                                "projectId": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "cloud_type": "ec2",
                    "cloud_data": {
                      "accountId": "10801293012",
                      "availabilityZone": "us-east-1a",
                      "ramdiskId": null,
                      "kernelId": null,
                      "pendingTime": "2019-07-19T21:45:07.000Z",
                      "architecture": "x86_64",
                      "privateIp": "192.168.1.211",
                      "devpayProductCodes": null,
                      "marketplaceProductCodes": null,
                      "version": "2017-09-30T00:00:00.000Z",
                      "region": "us-east-1",
                      "imageId": "ami-8400209011nsd0111",
                      "billingProducts": null,
                      "instanceId": "i-123123asdf0t41211",
                      "instanceType": "t2.micro"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/server": {
      "put": {
        "description": "Server action for VNS3 controller. Currently only reboot supported.",
        "summary": "Take server action",
        "operationId": "putServerAction",
        "tags": [
          "System Administration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "RebootRequest",
                "type": "object",
                "properties": {
                  "reboot": {
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "reboot": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SimpleStatusResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": "rebooting"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348220177382578437853325229350053485636",
                    "message": "Nothing to do"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Describe Runtime status details",
        "summary": "Get runtime status",
        "operationId": "getSystemStatus",
        "tags": [
          "System Administration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RuntimeStatusDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RuntimeStatus",
                      "type": "object",
                      "properties": {
                        "connected_clients": {
                          "type": "object",
                          "description": "clients keyed by ip address",
                          "additionalProperties": {
                            "title": "OverlayClient",
                            "type": "object",
                            "properties": {
                              "manager_id": {
                                "type": "integer"
                              },
                              "overlay_ipaddress": {
                                "type": "string"
                              },
                              "ipaddress": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "connected_subnets": {
                          "title": "ConnectedSubnets",
                          "type": "array",
                          "description": "Array of arrays with each element of length 2 representing [network, subnet mask]",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "ipsec": {
                          "type": "object",
                          "description": "IPSEC tunnels keyed by tunnel ID",
                          "additionalProperties": {
                            "title": "IpsecTunnel",
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "local_subnet": {
                                "type": "string"
                              },
                              "remote_subnet": {
                                "type": "string"
                              },
                              "endpoint_id": {
                                "type": "integer"
                              },
                              "endpoint_name": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              },
                              "description": {
                                "type": "string"
                              },
                              "connected": {
                                "type": "boolean"
                              },
                              "ping_interface": {
                                "type": "string",
                                "enum": [
                                  "eth0",
                                  "tun0"
                                ]
                              },
                              "ping_interval": {
                                "description": "Interval for ping in seconds",
                                "type": "integer"
                              },
                              "ping_ipaddress": {
                                "type": "string"
                              },
                              "tunnel_params": {
                                "title": "IpsecTunnelParams",
                                "type": "object",
                                "properties": {
                                  "phase2": {
                                    "type": "string"
                                  },
                                  "outbound_spi": {
                                    "type": "string"
                                  },
                                  "inbound_spi": {
                                    "type": "string"
                                  },
                                  "esp_time_remaining": {
                                    "type": "string"
                                  },
                                  "esp_port": {
                                    "type": "string"
                                  },
                                  "phase2_algo": {
                                    "type": "string"
                                  },
                                  "phase2_hash": {
                                    "type": "string"
                                  },
                                  "nat_t": {
                                    "type": "string"
                                  },
                                  "dpd": {
                                    "type": "string"
                                  },
                                  "phase1": {
                                    "type": "string"
                                  },
                                  "isakmp_port": {
                                    "type": "string"
                                  },
                                  "phase1_prf": {
                                    "type": "string"
                                  },
                                  "phase1_dh_group": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/status/system": {
      "get": {
        "description": "Provides information about the underlying appliance; memory, cpu, disk space, etc.",
        "summary": "Get system status",
        "operationId": "getComputeSystemStatus",
        "tags": [
          "System Administration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "timestamp",
            "schema": {
              "type": "integer"
            },
            "description": "Unix timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SystemStatusDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "SystemStatus",
                      "type": "object",
                      "properties": {
                        "data": {
                          "title": "SystemStatusData",
                          "type": "object",
                          "additionalProperties": true,
                          "properties": {
                            "sysstat": {
                              "title": "SystemSysStat",
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "example": [
                                [
                                  "vnscubed",
                                  "597",
                                  "1564089901",
                                  "all",
                                  "%user",
                                  "2.91"
                                ],
                                [
                                  "vnscubed",
                                  "597",
                                  "1564089901",
                                  "all",
                                  "%nice",
                                  "0.02"
                                ],
                                [
                                  "vnscubed",
                                  "597",
                                  "1564089901",
                                  "all",
                                  "%system",
                                  "1.49"
                                ],
                                [
                                  "vnscubed",
                                  "597",
                                  "1564089901",
                                  "all",
                                  "%iowait",
                                  "0.51"
                                ],
                                [
                                  "vnscubed",
                                  "597",
                                  "1564089901",
                                  "all",
                                  "%steal",
                                  "0.01"
                                ]
                              ]
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "timestamp_i": {
                              "type": "integer"
                            },
                            "vns3_version": {
                              "type": "string"
                            },
                            "kernel_version": {
                              "type": "string"
                            },
                            "uptime": {
                              "type": "integer"
                            },
                            "loadavg": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "diskinfo": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "meminfo": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "swapinfo": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "container_system": {
                              "title": "ContainerSystem",
                              "type": "object",
                              "properties": {
                                "container_system_running": {
                                  "type": "boolean"
                                },
                                "images_limit": {
                                  "type": "integer"
                                },
                                "images_stored": {
                                  "type": "integer"
                                },
                                "containers_limit": {
                                  "type": "integer"
                                },
                                "containers_active": {
                                  "type": "integer"
                                },
                                "container_network": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/status/task": {
      "get": {
        "description": "Describe task status details",
        "summary": "Get task status",
        "operationId": "getTaskStatus",
        "tags": [
          "System Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "GetTaskTokenRequest",
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TaskStatusDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "TaskStatus",
                      "type": "object",
                      "properties": {
                        "task_status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564152929359289894296619951832390615371038",
                    "message": "token is missing"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/access/tokens": {
      "get": {
        "description": "Retrieve list of api tokens",
        "summary": "Get API access tokens",
        "operationId": "getAPITokens",
        "tags": [
          "Access"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AccessTokenListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "AccessTokenList",
                      "type": "array",
                      "items": {
                        "title": "AccessToken",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "created_ip": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expires_at": {
                            "type": "integer"
                          },
                          "lifetime": {
                            "type": "string"
                          },
                          "refreshes": {
                            "type": "string"
                          },
                          "expired": {
                            "type": "boolean"
                          },
                          "last_access_at": {
                            "type": "string"
                          },
                          "last_accessed_ip": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/access/token": {
      "post": {
        "description": "Create api token",
        "summary": "Create API token",
        "operationId": "createAPIToken",
        "tags": [
          "Access"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateAPITokenRequest",
                "type": "object",
                "properties": {
                  "expires": {
                    "description": "Number of seconds before expiration",
                    "type": "integer",
                    "default": 3600,
                    "minimum": 60,
                    "maximum": 31536000
                  },
                  "token_name": {
                    "description": "Optional description of token",
                    "type": "string"
                  },
                  "refreshes": {
                    "description": "Token lifetime refreshes when used",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AccessTokenDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "AccessToken",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "created_ip": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expires_at": {
                          "type": "integer"
                        },
                        "lifetime": {
                          "type": "string"
                        },
                        "refreshes": {
                          "type": "string"
                        },
                        "expired": {
                          "type": "boolean"
                        },
                        "last_access_at": {
                          "type": "string"
                        },
                        "last_accessed_ip": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347797058992573673734848595852371200179",
                    "message": "expires range must be between 60 and 31,536,000"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/access/token/{token_id}": {
      "get": {
        "description": "Retrieve details for specific access token (including expired ones)",
        "summary": "Get API access token",
        "operationId": "getAPIToken",
        "tags": [
          "Access"
        ],
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested api token does not exist"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Expire API token",
        "summary": "Expire API token",
        "operationId": "putExpireAPIToken",
        "tags": [
          "Access"
        ],
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "ExpireRequest",
                "type": "object",
                "properties": {
                  "expired": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested api token does not exist"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete API token by ID",
        "summary": "Delete API token",
        "operationId": "deleteAPIToken",
        "tags": [
          "Access"
        ],
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SimpleStringResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "response": "Token deleted"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested api token does not exist"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access/urls": {
      "get": {
        "description": "Retrieve list of users' access urls, including expired ones",
        "summary": "Get access URLs",
        "operationId": "getAccessURLs",
        "tags": [
          "Access"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AccessUrlListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "AccessUrlList",
                      "type": "array",
                      "items": {
                        "title": "AccessUrl",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "url": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "created_ip": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expires_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lifetime": {
                            "type": "string"
                          },
                          "expired": {
                            "type": "boolean"
                          },
                          "last_access_at": {
                            "type": "string"
                          },
                          "last_accessed_ip": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/access/url": {
      "post": {
        "description": "Create access URL",
        "summary": "Create access URL",
        "operationId": "createAccessURL",
        "tags": [
          "Access"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateAccessURLRequest",
                "type": "object",
                "properties": {
                  "expires": {
                    "description": "Number of seconds before expiration",
                    "type": "integer",
                    "default": 3600,
                    "minimum": 60,
                    "maximum": 259200
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AccessUrlDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "AccessUrl",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "url": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "created_ip": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expires_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lifetime": {
                          "type": "string"
                        },
                        "expired": {
                          "type": "boolean"
                        },
                        "last_access_at": {
                          "type": "string"
                        },
                        "last_accessed_ip": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347797058992573673734848595852371200179",
                    "message": "expires range must be between 60 and 259200"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "delete": {
        "description": "Delete access URL by ID or URL",
        "summary": "Find and delete access URL",
        "operationId": "deleteAccessURLBySearch",
        "tags": [
          "Access"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "DeleteAccessURLRequest",
                "type": "object",
                "oneOf": [
                  {
                    "required": [
                      "access_url_id"
                    ]
                  },
                  {
                    "required": [
                      "access_url"
                    ]
                  }
                ],
                "properties": {
                  "thanks f": {
                    "description": "ID of access URL",
                    "type": "integer"
                  },
                  "access_url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token~1%7Btoken_id%7D/delete/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": "Access url deleted"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Invalid or missing access url"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access/url/{access_url_id}": {
      "get": {
        "description": "Retrieve details for specific access url (including expired ones)",
        "summary": "Get access URL",
        "operationId": "getAccessURL",
        "tags": [
          "Access"
        ],
        "parameters": [
          {
            "name": "access_url_id",
            "in": "path",
            "description": "Access URL ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1url/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Invalid or missing access url"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Expire access URL",
        "summary": "Expire access URL",
        "operationId": "putExpireAccessURL",
        "tags": [
          "Access"
        ],
        "parameters": [
          {
            "name": "access_url_id",
            "in": "path",
            "description": "Access URL ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "ExpireRequest",
                "type": "object",
                "properties": {
                  "expired": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1url/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Invalid or missing access url"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete access URL by ID",
        "summary": "Delete access URL",
        "operationId": "deleteAccessURL",
        "tags": [
          "Access"
        ],
        "parameters": [
          {
            "name": "access_url_id",
            "in": "path",
            "description": "Access URL ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token~1%7Btoken_id%7D/delete/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": "Access url deleted"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Invalid or missing access url"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin_ui": {
      "put": {
        "description": "Update Admin UI settings. Enable/Disable and set credentials.\n",
        "summary": "Update admin UI settings",
        "operationId": "updateUISettings",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateAdminUISettingsRequest",
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "admin_username": {
                    "type": "string"
                  },
                  "admin_password": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "enabled": true,
                "admin_username": "vnscubed_user",
                "admin_password": "supersecurepassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AdminUISettingsDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "admin_username": {
                          "type": "string"
                        },
                        "admin_password": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "enabled": true,
                    "username": "vnscubed_user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348220177382578437853325229350053485636",
                    "message": "admin_username is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/api_password": {
      "put": {
        "description": "Allows you to change the API password/secret key.  To change the Web UI password (or username) use PUT admin_ui.\n",
        "summary": "Update API password",
        "operationId": "updateAPIPassword",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdatePasswordRequest",
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PasswordResetResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "password_reset": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "password_reset": "ok"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348220177382578437853325229350053485636",
                    "message": "Invalid password"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/config": {
      "get": {
        "description": "Describe Runtime Configuration for VNS3 Controller",
        "summary": "Get configuration details",
        "operationId": "getConfigurationDetails",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Get runtime Configuration details",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ConfigDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RuntimeConfig",
                      "type": "object",
                      "properties": {
                        "asn": {
                          "description": "Autonomous system number for controller if peered",
                          "type": "integer"
                        },
                        "topology_name": {
                          "type": "string"
                        },
                        "topology_checksum": {
                          "type": "string"
                        },
                        "manager_id": {
                          "description": "This managers ID in peered topology",
                          "type": "integer"
                        },
                        "ntp_hosts": {
                          "description": "NTP host endpoints, whitespace delimited",
                          "type": "string"
                        },
                        "vns3_version": {
                          "type": "string"
                        },
                        "licensed": {
                          "type": "boolean"
                        },
                        "overlay_ipaddress": {
                          "description": "This managers overlay IP in peered topology",
                          "type": "string"
                        },
                        "peered": {
                          "type": "boolean"
                        },
                        "public_ipaddress": {
                          "type": "string"
                        },
                        "private_ipaddress": {
                          "type": "string"
                        },
                        "security_token": {
                          "description": "Security token in peered topology",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "asn": 65001,
                    "topology_name": "Cohesive",
                    "topology_checksum": "a04a92073a4f6f32a2abce45439a2d8c016334dc",
                    "manager_id": 1,
                    "ntp_hosts": "0.ubuntu.pool.ntp.org 1.ubuntu.pool.ntp.org 2.ubuntu.pool.ntp.org 3.ubuntu.pool.ntp.org ntp.ubuntu.com time.apple.com",
                    "vns3_version": "4.5.0",
                    "licensed": true,
                    "overlay_ipaddress": "172.31.0.100",
                    "peered": true,
                    "public_ipaddress": "50.240.142.209",
                    "private_ipaddress": "192.168.30.247"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "put": {
        "description": "Provides general information about the manager's topology, license state and  checksums and allows you to set the topology name.\n",
        "summary": "Update configuration",
        "operationId": "updateConfiguration",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateConfigRequest",
                "type": "object",
                "properties": {
                  "topology_name": {
                    "description": "Specifies a text name to display at the top of the web ui and in the desc_config API response",
                    "type": "string"
                  },
                  "ntp_hosts": {
                    "description": "Single or space separated list of ntp server IPs or dns names.  Using this argument overwrites the existing Configuration.\n",
                    "type": "string"
                  }
                }
              },
              "example": {
                "topology_name": "Cohesive Test Topology"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1config/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348220177382578437853325229350053485636",
                    "message": "ntp_hosts is not in proper domain name format or ipv4 address format. Update abandoned."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/system/ssl/keypair": {
      "put": {
        "description": "Upload new SSL cert and key pair",
        "summary": "Upload new SSL cert and key pair",
        "operationId": "uploadSSLCerts",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateServerSSLRequest",
                "type": "object",
                "required": [
                  "cert",
                  "key"
                ],
                "properties": {
                  "cert": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token~1%7Btoken_id%7D/delete/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": "Valid key/cert files uploaded"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "cert is missing, key is missing"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/system/ssl/install": {
      "put": {
        "description": "Install SSL cert and key pair",
        "summary": "Install SSL cert and key pair",
        "operationId": "installSSL",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ServerSSLDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ServerSSLDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": "SSL Cert installation queued",
                    "uuid": "10923jnowfdhgu039jon4r09201"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "cert is missing, key is missing"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/system/ssl/install/{uuid}": {
      "get": {
        "description": "Get status for ssl installation task",
        "summary": "Get SSL installation status",
        "operationId": "getSSLInstallStatus",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1system~1ssl~1install/put/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "uuid": "19230109239012390129031012312",
                    "status": "Job pending",
                    "state": "pending"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Unknown Job ID: 1234"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keyset": {
      "get": {
        "description": "Returns keyset details. The keyset is a set of cryptographic credentials  used for encrypting all data on the overlay network.\n",
        "summary": "Get topology keyset",
        "operationId": "getTopologyKeyset",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "KeysetDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "KeysetStatus",
                      "type": "object",
                      "properties": {
                        "in_progress": {
                          "type": "boolean"
                        },
                        "running": {
                          "type": "integer"
                        },
                        "keyset_present": {
                          "type": "boolean"
                        },
                        "checksum": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "created_at_i": {
                          "type": "integer"
                        },
                        "started_at": {
                          "type": "string"
                        },
                        "started_at_i": {
                          "type": "integer"
                        },
                        "uuid": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "keyset_present": true,
                    "created_at": "2019-07-19T19:44:02.191Z",
                    "created_at_i": 1563565442,
                    "checksum": "6093b865464ec3f7ab7213975c3b952763d1df14",
                    "uuid": "8effb1ea-aa5d-11e9-aaf4-02935c82307a"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Generate keyset The keyset is a set of cryptographic credentials used for encrypting all data on the overlay network. Keyset generation happens in background. Poll on GET /keyset in_progress value for keyset status.\n",
        "summary": "Generate keyset",
        "operationId": "generateKeyset",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateKeysetRequest",
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "source": {
                    "description": "If provided, fetches keyset from source manager",
                    "type": "string"
                  },
                  "token": {
                    "description": "Arbitrary key used to help randomize the checksum, it must be identical for each manager in a topology.",
                    "type": "string"
                  },
                  "topology_name": {
                    "description": "Name for the topology",
                    "type": "string"
                  },
                  "sealed_network": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1keyset/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "keyset_preset": false,
                    "in_progress": true,
                    "started_at": "2019-07-19T19:43:00.147Z",
                    "started_at_i": 1563565380,
                    "running": 0
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "token is missing"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/license": {
      "get": {
        "description": "Get license details",
        "summary": "Get license details",
        "operationId": "getLicenseDetails",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Get license topology details",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LicenseDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "License",
                      "type": "object",
                      "properties": {
                        "capabilities": {
                          "type": "array",
                          "description": "Features available such as eBGP, CloudWAN etc.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "finalized": {
                          "type": "boolean"
                        },
                        "license": {
                          "type": "string",
                          "description": "State of license, accepted, in-progress, failed"
                        },
                        "license_present": {
                          "type": "boolean"
                        },
                        "sha1_checksum": {
                          "type": "string"
                        },
                        "uploaded_at": {
                          "type": "string"
                        },
                        "custom_addressing": {
                          "type": "boolean"
                        },
                        "uploaded_at_i": {
                          "type": "integer"
                        },
                        "container_details": {
                          "type": "object",
                          "properties": {
                            "containers_run_count": {
                              "type": "integer"
                            },
                            "containers_image_count": {
                              "type": "integer"
                            }
                          }
                        },
                        "topology": {
                          "title": "Topology",
                          "type": "object",
                          "properties": {
                            "clients": {
                              "type": "array",
                              "description": "IPs for clientpacks",
                              "items": {
                                "title": "OverlayIPAddress",
                                "type": "object",
                                "properties": {
                                  "ip_address": {
                                    "type": "string"
                                  },
                                  "octets": {
                                    "type": "array",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            },
                            "managers": {
                              "type": "array",
                              "items": {
                                "title": "VNS3Controller",
                                "type": "object",
                                "properties": {
                                  "asn": {
                                    "type": "integer"
                                  },
                                  "manager_id": {
                                    "type": "integer"
                                  },
                                  "overlay_ipaddress": {
                                    "$ref": "#/paths/~1license/get/responses/200/content/application~1json/schema/properties/response/properties/topology/properties/clients/items"
                                  }
                                }
                              }
                            },
                            "total_clients": {
                              "type": "integer"
                            },
                            "ipsec_max_subnets": {
                              "type": "integer"
                            },
                            "ipsec_max_endpoints": {
                              "type": "integer"
                            },
                            "license_upgrades": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "overlay_max_clients": {
                              "type": "integer"
                            },
                            "overlay_subnet": {
                              "type": "string",
                              "description": "CIDR for overlay clients"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "9009012801280138018910283081301390103",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "License a VNS3 Controller to be a part of a specific topology. Must not be licensed already.",
        "summary": "Upload license",
        "operationId": "uploadLicense",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "description": "License file",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload license response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InitLicenseDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "LicenseInitial",
                      "type": "object",
                      "properties": {
                        "capabilities": {
                          "type": "array",
                          "description": "Features available such as eBGP, CloudWAN, Containers etc.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "finalized": {
                          "type": "boolean"
                        },
                        "license": {
                          "type": "string",
                          "description": "State of license, accepted, in-progress, failed"
                        },
                        "license_present": {
                          "type": "boolean"
                        },
                        "default_topology": {
                          "title": "Topology",
                          "type": "object",
                          "properties": {
                            "clients": {
                              "type": "array",
                              "description": "IPs for clientpacks",
                              "items": {
                                "title": "OverlayIPAddress",
                                "type": "object",
                                "properties": {
                                  "ip_address": {
                                    "type": "string"
                                  },
                                  "octets": {
                                    "type": "array",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            },
                            "managers": {
                              "type": "array",
                              "items": {
                                "title": "VNS3Controller",
                                "type": "object",
                                "properties": {
                                  "asn": {
                                    "type": "integer"
                                  },
                                  "manager_id": {
                                    "type": "integer"
                                  },
                                  "overlay_ipaddress": {
                                    "$ref": "#/paths/~1license/put/responses/200/content/application~1json/schema/properties/response/properties/default_topology/properties/clients/items"
                                  }
                                }
                              }
                            },
                            "total_clients": {
                              "type": "integer"
                            },
                            "ipsec_max_subnets": {
                              "type": "integer"
                            },
                            "ipsec_max_endpoints": {
                              "type": "integer"
                            },
                            "license_upgrades": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "overlay_max_clients": {
                              "type": "integer"
                            },
                            "overlay_subnet": {
                              "type": "string",
                              "description": "CIDR for overlay clients"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348220177382578437853325229350053485636",
                    "message": "Bad license"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/license/parameters": {
      "put": {
        "description": "Set and accept license parameters. Triggers reboot. Irreversible operation.",
        "summary": "Set license parameters",
        "operationId": "setLicenseParameters",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "PutLicenseParametersRequest",
                "type": "object",
                "properties": {
                  "subnet": {
                    "description": "Specifies the CIDR of the virtual network created for use with the VNS3 Manager",
                    "type": "string"
                  },
                  "managers": {
                    "description": "Whitespace delimited address string in the subnet to use for the VNS3 Controllers' virtual interfaces.",
                    "type": "string"
                  },
                  "asns": {
                    "description": "Whitespace delimited string of ASNs (autonomous system numbers) corresponding to the order of the controllers",
                    "type": "string"
                  },
                  "clients": {
                    "description": "Comma delimited, or hyphenated sequence of addresses for use as client addresses in the virtual network.",
                    "type": "string"
                  },
                  "my_manager_vip": {
                    "description": "IPAddress that must be allocated from the subnet, and be the same for all controllers",
                    "type": "string"
                  },
                  "default": {
                    "description": "Specifices whether to use defualt topology addressing as specified by the license",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Put new license parameters for topology",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LicenseParametersDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "LicenseParametersState",
                      "type": "object",
                      "properties": {
                        "license": {
                          "type": "string"
                        },
                        "finalized": {
                          "type": "boolean"
                        },
                        "parameters": {
                          "title": "LicenseParameters",
                          "type": "object",
                          "properties": {
                            "subnet": {
                              "type": "string"
                            },
                            "controllers": {
                              "type": "array",
                              "description": "IP addresses of VNS3 controllers in topology",
                              "items": {
                                "type": "string"
                              }
                            },
                            "clients": {
                              "type": "array",
                              "description": "IP addresses of clients in topology",
                              "items": {
                                "type": "string"
                              }
                            },
                            "my_manager_vip": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "invalid asns field"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/license/upgrade": {
      "put": {
        "description": "Upload new license to controller",
        "summary": "Upgrade license",
        "operationId": "upgradeLicense",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "description": "License file",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New license parameters",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpgradeLicenseResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "finalized": {
                          "type": "boolean"
                        },
                        "uniq": {
                          "description": "new sha1 hash of license",
                          "type": "string"
                        },
                        "license": {
                          "description": "State of license, accepted, in-progress, failed",
                          "type": "string"
                        },
                        "new_clientpacks": {
                          "type": "integer"
                        },
                        "new_managers": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ms": {
      "get": {
        "description": "Get MS configuration",
        "summary": "Get MS configuration",
        "operationId": "getMSConfig",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ip",
            "description": "name of resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get VNS3:ms alert success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AlertDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "Alert",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "enabled": {
                          "type": "boolean"
                        },
                        "webhook_id": {
                          "type": "integer"
                        },
                        "template_id": {
                          "type": "integer"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "custom_properties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "post": {
        "description": "Set VNS3 Management System endpoint",
        "summary": "Set MS for controller",
        "operationId": "setMSConfig",
        "tags": [
          "Monitoring and Alerting"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "SetMSRequest",
                "type": "object",
                "required": [
                  "ip"
                ],
                "properties": {
                  "ip": {
                    "description": "VNS3 Management system endpoint IP address",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MSConfig",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "ip": {
                          "description": "IP address of VNS3 Management Systems",
                          "type": "string"
                        },
                        "alert_enabled": {
                          "description": "Enable alerting to MS",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "put": {
        "description": "Update VNS3 Management System integration",
        "summary": "Update MS config for controller",
        "operationId": "updateMSConfig",
        "tags": [
          "Monitoring and Alerting"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "SetMSRequest",
                "type": "object",
                "required": [
                  "alert_enabled"
                ],
                "properties": {
                  "ip": {
                    "description": "VNS3 Management system endpoint IP address",
                    "type": "string"
                  },
                  "alert_enabled": {
                    "description": "Disable/Enable sending alerts to VNS3:ms",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ms/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ms/alert/test": {
      "post": {
        "description": "Send test alert to VNS3:ms",
        "summary": "Send test VNS3:ms alert",
        "operationId": "sentTestMSAlert",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SimpleBooleanResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/status/ipsec": {
      "get": {
        "description": "Describe ipsec tunnels status",
        "summary": "Get IPsec status",
        "operationId": "getIpsecStatus",
        "tags": [
          "IPsec"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "IpsecTunnelListResponseKeyValue",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "description": "Ipsec tunnel details keyed by ID",
                      "additionalProperties": {
                        "title": "IpsecTunnel",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "local_subnet": {
                            "type": "string"
                          },
                          "remote_subnet": {
                            "type": "string"
                          },
                          "endpoint_id": {
                            "type": "integer"
                          },
                          "endpoint_name": {
                            "type": "string"
                          },
                          "active": {
                            "type": "boolean"
                          },
                          "description": {
                            "type": "string"
                          },
                          "connected": {
                            "type": "boolean"
                          },
                          "ping_interface": {
                            "type": "string",
                            "enum": [
                              "eth0",
                              "tun0"
                            ]
                          },
                          "ping_interval": {
                            "description": "Interval for ping in seconds",
                            "type": "integer"
                          },
                          "ping_ipaddress": {
                            "type": "string"
                          },
                          "tunnel_params": {
                            "title": "IpsecTunnelParams",
                            "type": "object",
                            "properties": {
                              "phase2": {
                                "type": "string"
                              },
                              "outbound_spi": {
                                "type": "string"
                              },
                              "inbound_spi": {
                                "type": "string"
                              },
                              "esp_time_remaining": {
                                "type": "string"
                              },
                              "esp_port": {
                                "type": "string"
                              },
                              "phase2_algo": {
                                "type": "string"
                              },
                              "phase2_hash": {
                                "type": "string"
                              },
                              "nat_t": {
                                "type": "string"
                              },
                              "dpd": {
                                "type": "string"
                              },
                              "phase1": {
                                "type": "string"
                              },
                              "isakmp_port": {
                                "type": "string"
                              },
                              "phase1_prf": {
                                "type": "string"
                              },
                              "phase1_dh_group": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/status/link_history": {
      "get": {
        "description": "Provides information about the connection history of the subnet or tunnel",
        "summary": "Get IPsec link history",
        "operationId": "getIpsecLinkHistory",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "remote",
            "schema": {
              "type": "string"
            },
            "description": "Address string in CIDR format to display link history to a remote endpoint."
          },
          {
            "in": "query",
            "name": "local",
            "schema": {
              "type": "string"
            },
            "description": "Address string in CIDR format which will display status of the local route"
          },
          {
            "in": "query",
            "name": "tunnelid",
            "schema": {
              "type": "integer"
            },
            "description": "Will display link history of just the tunnel specified, which may be only one tunnel to a remote endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LinkHistoryDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "LinkHistory",
                      "type": "object",
                      "properties": {
                        "remote": {
                          "type": "string"
                        },
                        "local": {
                          "type": "string"
                        },
                        "tunnelid": {
                          "type": "integer"
                        },
                        "history": {
                          "type": "array",
                          "items": {
                            "title": "LinkEvent",
                            "type": "object",
                            "properties": {
                              "event": {
                                "description": "Tunnel event, up or down",
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "string"
                              },
                              "timestamp_i": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564152672558671466135091328226684573894656",
                    "message": "bad or invalid remote"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/status/connected_subnets": {
      "get": {
        "description": "Provides information about any connected subnets.",
        "summary": "Get connected subnets",
        "operationId": "getConnectedSubnets",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "extended_output",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Receive verbose information about resources"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ConnectedSubnetsDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ConnectedSubnetsDetail",
                      "oneOf": [
                        {
                          "title": "ConnectedSubnets",
                          "type": "array",
                          "description": "Array of arrays with each element of length 2 representing [network, subnet mask]",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "title": "ConnectedSubnetsVerbose",
                          "type": "array",
                          "items": {
                            "title": "ConnectedSubnet",
                            "type": "object",
                            "properties": {
                              "subnet": {
                                "type": "string"
                              },
                              "network": {
                                "type": "string"
                              },
                              "cidr_mask": {
                                "type": "string"
                              },
                              "managerid": {
                                "type": "integer"
                              },
                              "netmask": {
                                "type": "string"
                              },
                              "origin": {
                                "description": "ipsec, local_no_encryption, remote_manager, or ebgp",
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ipsec": {
      "get": {
        "description": "Get details for all IPsec endpoints/subnets",
        "summary": "Get IPsec details",
        "operationId": "getIpsecDetails",
        "tags": [
          "IPsec"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "IpsecSystemDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "this_endpoint": {
                          "title": "IpsecLocalEndpoint",
                          "type": "object",
                          "properties": {
                            "nat_traversal": {
                              "type": "boolean"
                            },
                            "ipaddress": {
                              "type": "string"
                            },
                            "overlay_subnet": {
                              "type": "string"
                            },
                            "private_ipaddress": {
                              "type": "string"
                            },
                            "ipsec_local_ipaddress": {
                              "type": "string"
                            },
                            "asn": {
                              "type": "integer"
                            }
                          }
                        },
                        "remote_endpoints": {
                          "type": "object",
                          "additionalProperties": {
                            "title": "IpsecRemoteEndpoint",
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "ipaddress": {
                                "type": "string"
                              },
                              "nat_t_enabled": {
                                "type": "boolean"
                              },
                              "ike_version": {
                                "type": "string"
                              },
                              "pfs": {
                                "description": "Perfect forward secrecy enabled",
                                "type": "boolean"
                              },
                              "private_ipaddress": {
                                "type": "string"
                              },
                              "extra_config": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "tunnels": {
                                "type": "object",
                                "additionalProperties": {
                                  "title": "IpsecTunnel",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "local_subnet": {
                                      "type": "string"
                                    },
                                    "remote_subnet": {
                                      "type": "string"
                                    },
                                    "endpoint_id": {
                                      "type": "integer"
                                    },
                                    "endpoint_name": {
                                      "type": "string"
                                    },
                                    "active": {
                                      "type": "boolean"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "connected": {
                                      "type": "boolean"
                                    },
                                    "ping_interface": {
                                      "type": "string",
                                      "enum": [
                                        "eth0",
                                        "tun0"
                                      ]
                                    },
                                    "ping_interval": {
                                      "description": "Interval for ping in seconds",
                                      "type": "integer"
                                    },
                                    "ping_ipaddress": {
                                      "type": "string"
                                    },
                                    "tunnel_params": {
                                      "title": "IpsecTunnelParams",
                                      "type": "object",
                                      "properties": {
                                        "phase2": {
                                          "type": "string"
                                        },
                                        "outbound_spi": {
                                          "type": "string"
                                        },
                                        "inbound_spi": {
                                          "type": "string"
                                        },
                                        "esp_time_remaining": {
                                          "type": "string"
                                        },
                                        "esp_port": {
                                          "type": "string"
                                        },
                                        "phase2_algo": {
                                          "type": "string"
                                        },
                                        "phase2_hash": {
                                          "type": "string"
                                        },
                                        "nat_t": {
                                          "type": "string"
                                        },
                                        "dpd": {
                                          "type": "string"
                                        },
                                        "phase1": {
                                          "type": "string"
                                        },
                                        "isakmp_port": {
                                          "type": "string"
                                        },
                                        "phase1_prf": {
                                          "type": "string"
                                        },
                                        "phase1_dh_group": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "bgp_peers": {
                                "type": "object",
                                "additionalProperties": {
                                  "title": "BGPPeer",
                                  "type": "object",
                                  "properties": {
                                    "asn": {
                                      "type": "integer"
                                    },
                                    "ipaddress": {
                                      "type": "string"
                                    },
                                    "access_list": {
                                      "description": "List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"",
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "bgp_password": {
                                      "type": "string"
                                    },
                                    "add_network_distance": {
                                      "type": "boolean"
                                    },
                                    "add_network_distance_direction": {
                                      "type": "string",
                                      "description": "in or out"
                                    },
                                    "add_network_distance_hops": {
                                      "type": "integer"
                                    },
                                    "connection_detail": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "type": {
                                "description": "Indicating Ipsec or GRE over ipsec",
                                "type": "string"
                              },
                              "vpn_type": {
                                "type": "string"
                              },
                              "gre_interface_address": {
                                "type": "string"
                              },
                              "route_based_int_address": {
                                "type": "string"
                              },
                              "route_based_local": {
                                "type": "string"
                              },
                              "route_based_remote": {
                                "type": "string"
                              },
                              "psk": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "this_endpoint": {
                      "ipaddress": "3.222.68.251",
                      "overlay_subnet": "100.127.255.192/26",
                      "private_ipaddress": "192.168.1.230",
                      "ipsec_local_ipaddress": "192.168.1.230",
                      "asn": 65001
                    },
                    "remote_endpoints": {}
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "post": {
        "description": "Restart ipsec subystem",
        "summary": "Restart ipsec subystem",
        "operationId": "restartIpsec",
        "tags": [
          "IPsec"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "RestartRequest",
                "required": [
                  "restart"
                ],
                "properties": {
                  "restart": {
                    "description": "Restarts target system on server if true",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RestartStatus",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "restart": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "restart is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "put": {
        "description": "Edit Ipsec Configuration on device. Note, This is device wide and must be set before  any remote endpoint definitions are created. If it needs to be changed, all remote endpoint  information and tunnel information must be deleted first.\n",
        "summary": "Update IPsec config",
        "operationId": "updateIpsecConfig",
        "tags": [
          "IPsec"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateIpsecAddressRequest",
                "type": "object",
                "required": [
                  "ipsec_local_address"
                ],
                "properties": {
                  "ipsec_local_address": {
                    "description": "This is effectively a \"cloud NAT\" address, since you don't know what your LAN address  will be between invocations in a cloud, this address can be used by remote endpoints  as your \"behind a NAT\" address, sometimes referred to Peer or IKE ID, if needed (e.g. Watchguard or Juniper). It can ALSO be thought of even more simply as an IPsec \"loopback\" interface that you can use to terminate traffic.\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "ipsec_local_address is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ipsec/endpoints": {
      "post": {
        "description": "Create IPsec connection to the defined remote gateway",
        "summary": "Create IPsec endpoint",
        "operationId": "createIpsecEnpoint",
        "tags": [
          "IPsec"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateIpsecEndpointRequest",
                "type": "object",
                "required": [
                  "name",
                  "ipaddress",
                  "secret"
                ],
                "properties": {
                  "name": {
                    "description": "Name for the connection.",
                    "type": "string"
                  },
                  "ipaddress": {
                    "description": "IP of the remote gateway",
                    "type": "string"
                  },
                  "secret": {
                    "description": "Pre-shared key",
                    "type": "string"
                  },
                  "pfs": {
                    "description": "Perfect Forward Secrecy if true, disables if false.",
                    "default": true,
                    "type": "boolean"
                  },
                  "ike_version": {
                    "description": "Version for IKE algorithm",
                    "type": "integer",
                    "default": 1,
                    "enum": [
                      1,
                      2
                    ]
                  },
                  "nat_t_enabled": {
                    "description": "True if you want encapsulated IPsec protocol to this gateway",
                    "type": "boolean",
                    "default": true
                  },
                  "extra_config": {
                    "description": "Additional optionals for connection such as 'phase1=aes256_gcm-sha2_256-dh14 phase2=aes256_gcm'",
                    "type": "string"
                  },
                  "private_ipaddress": {
                    "description": "Internal NAT address of the remote gateway",
                    "type": "string"
                  },
                  "gre": {
                    "description": "True if GRE is being used for the specific endpoint",
                    "type": "boolean"
                  },
                  "gre_interface_address": {
                    "description": "Interface for GRE in /30 format",
                    "type": "string"
                  },
                  "vpn_type": {
                    "description": "policy, gre, vti",
                    "type": "string",
                    "default": "policy"
                  },
                  "route_based_int_address": {
                    "type": "string"
                  },
                  "route_based_local": {
                    "type": "string"
                  },
                  "route_based_remote": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "IpsecRemoteEndpointDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "IpsecRemoteEndpoint",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "ipaddress": {
                          "type": "string"
                        },
                        "nat_t_enabled": {
                          "type": "boolean"
                        },
                        "ike_version": {
                          "type": "string"
                        },
                        "pfs": {
                          "description": "Perfect forward secrecy enabled",
                          "type": "boolean"
                        },
                        "private_ipaddress": {
                          "type": "string"
                        },
                        "extra_config": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "tunnels": {
                          "type": "object",
                          "additionalProperties": {
                            "title": "IpsecTunnel",
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "local_subnet": {
                                "type": "string"
                              },
                              "remote_subnet": {
                                "type": "string"
                              },
                              "endpoint_id": {
                                "type": "integer"
                              },
                              "endpoint_name": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              },
                              "description": {
                                "type": "string"
                              },
                              "connected": {
                                "type": "boolean"
                              },
                              "ping_interface": {
                                "type": "string",
                                "enum": [
                                  "eth0",
                                  "tun0"
                                ]
                              },
                              "ping_interval": {
                                "description": "Interval for ping in seconds",
                                "type": "integer"
                              },
                              "ping_ipaddress": {
                                "type": "string"
                              },
                              "tunnel_params": {
                                "title": "IpsecTunnelParams",
                                "type": "object",
                                "properties": {
                                  "phase2": {
                                    "type": "string"
                                  },
                                  "outbound_spi": {
                                    "type": "string"
                                  },
                                  "inbound_spi": {
                                    "type": "string"
                                  },
                                  "esp_time_remaining": {
                                    "type": "string"
                                  },
                                  "esp_port": {
                                    "type": "string"
                                  },
                                  "phase2_algo": {
                                    "type": "string"
                                  },
                                  "phase2_hash": {
                                    "type": "string"
                                  },
                                  "nat_t": {
                                    "type": "string"
                                  },
                                  "dpd": {
                                    "type": "string"
                                  },
                                  "phase1": {
                                    "type": "string"
                                  },
                                  "isakmp_port": {
                                    "type": "string"
                                  },
                                  "phase1_prf": {
                                    "type": "string"
                                  },
                                  "phase1_dh_group": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "bgp_peers": {
                          "type": "object",
                          "additionalProperties": {
                            "title": "BGPPeer",
                            "type": "object",
                            "properties": {
                              "asn": {
                                "type": "integer"
                              },
                              "ipaddress": {
                                "type": "string"
                              },
                              "access_list": {
                                "description": "List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"",
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "bgp_password": {
                                "type": "string"
                              },
                              "add_network_distance": {
                                "type": "boolean"
                              },
                              "add_network_distance_direction": {
                                "type": "string",
                                "description": "in or out"
                              },
                              "add_network_distance_hops": {
                                "type": "integer"
                              },
                              "connection_detail": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "type": {
                          "description": "Indicating Ipsec or GRE over ipsec",
                          "type": "string"
                        },
                        "vpn_type": {
                          "type": "string"
                        },
                        "gre_interface_address": {
                          "type": "string"
                        },
                        "route_based_int_address": {
                          "type": "string"
                        },
                        "route_based_local": {
                          "type": "string"
                        },
                        "route_based_remote": {
                          "type": "string"
                        },
                        "psk": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "ipaddress is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ipsec/endpoints/{endpoint_id}": {
      "get": {
        "description": "Get IPsec endpoint information",
        "summary": "Get IPsec endpoint",
        "operationId": "getIpsecEnpoint",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "put": {
        "description": "Edit IPsec endpoint connection configuration parameters",
        "summary": "Update IPsec endpoint",
        "operationId": "updateIpsecEnpoint",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateIpsecConnectionRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name for the connection.",
                    "type": "string"
                  },
                  "ipaddress": {
                    "description": "IP of the remote gateway",
                    "type": "string"
                  },
                  "secret": {
                    "description": "Pre-shared key",
                    "type": "string"
                  },
                  "pfs": {
                    "description": "Perfect Forward Secrecy if true, disables if false.",
                    "type": "boolean"
                  },
                  "ike_version": {
                    "description": "Version for IKE algorithm",
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ]
                  },
                  "nat_t_enabled": {
                    "description": "True if you want encapsulated IPsec protocol to this gateway",
                    "type": "boolean"
                  },
                  "extra_config": {
                    "description": "Additional optionals for connection such as 'phase1=aes256_gcm-sha2_256-dh14 phase2=aes256_gcm'",
                    "type": "string"
                  },
                  "private_ipaddress": {
                    "description": "Internal NAT address of the remote gateway",
                    "type": "string"
                  },
                  "gre": {
                    "description": "True if GRE is being used for the specific endpoint",
                    "type": "boolean"
                  },
                  "gre_interface_address": {
                    "description": "Interface address for GRE",
                    "type": "string"
                  },
                  "vpn_type": {
                    "description": "policy, gre, vti",
                    "type": "string"
                  },
                  "route_based_int_address": {
                    "type": "string"
                  },
                  "route_based_local": {
                    "type": "string"
                  },
                  "route_based_remote": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "nat_t_enabled is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "delete": {
        "description": "Delete IPsec endpoint",
        "summary": "Delete IPsec endpoint",
        "operationId": "deleteIpsecEnpoint",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "endpoint_id does not exist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ipsec/endpoints/{endpoint_id}/tunnels": {
      "post": {
        "description": "Create IPsec endpoint tunnel",
        "summary": "Create IPsec endpoint tunnel",
        "operationId": "createIpsecTunnel",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateIpsecTunnelRequest",
                "type": "object",
                "required": [
                  "remote_subnet"
                ],
                "properties": {
                  "remote_subnet": {
                    "description": "Remote subnet for tunnel in CIDR notation",
                    "type": "string"
                  },
                  "local_subnet": {
                    "description": "Local subnet for tunnel in CIDR notation",
                    "type": "string"
                  },
                  "ping_ipaddress": {
                    "description": "Exo Ping feature - remote IP destination of ping",
                    "type": "string"
                  },
                  "ping_interval": {
                    "description": "Exo Ping feature - periodicy of the ping in seconds",
                    "type": "integer"
                  },
                  "ping_interface": {
                    "description": "Exo Ping feature - what network interface IP of the VNS3 controller to use as the source of ping",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Disables tunnel if set to false",
                    "type": "boolean",
                    "default": true
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "endpoint_id does not exist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Permission denied. Max number of tunnels reach",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/ipsec/endpoints/{endpoint_id}/tunnels/{tunnel_id}": {
      "put": {
        "description": "Edit IPsec endpoint tunnel configuration",
        "summary": "Update IPsec endpoint tunnel",
        "operationId": "updateIpsecTunnel",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "tunnel_id",
            "in": "path",
            "description": "ID for tunnel",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateIpsecTunnelRequest",
                "type": "object",
                "properties": {
                  "bounce": {
                    "description": "Resets the IPsec connection for this specific tunnel",
                    "type": "boolean",
                    "default": false
                  },
                  "description": {
                    "type": "string"
                  },
                  "remote_subnet": {
                    "description": "Remote subnet for tunnel in CIDR notation",
                    "type": "string"
                  },
                  "local_subnet": {
                    "description": "Local subnet for tunnel in CIDR notation",
                    "type": "string"
                  },
                  "ping_ipaddress": {
                    "description": "Exo Ping feature - remote IP destination of ping",
                    "type": "string"
                  },
                  "ping_interval": {
                    "description": "Exo Ping feature - periodicy of the ping in seconds",
                    "type": "integer"
                  },
                  "ping_interface": {
                    "description": "Exo Ping feature - what network interface IP of the VNS3 controller to use as the source of ping",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Disables tunnel if set to false",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "IpsecTunnelDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "IpsecTunnel",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "local_subnet": {
                          "type": "string"
                        },
                        "remote_subnet": {
                          "type": "string"
                        },
                        "endpoint_id": {
                          "type": "integer"
                        },
                        "endpoint_name": {
                          "type": "string"
                        },
                        "active": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "connected": {
                          "type": "boolean"
                        },
                        "ping_interface": {
                          "type": "string",
                          "enum": [
                            "eth0",
                            "tun0"
                          ]
                        },
                        "ping_interval": {
                          "description": "Interval for ping in seconds",
                          "type": "integer"
                        },
                        "ping_ipaddress": {
                          "type": "string"
                        },
                        "tunnel_params": {
                          "title": "IpsecTunnelParams",
                          "type": "object",
                          "properties": {
                            "phase2": {
                              "type": "string"
                            },
                            "outbound_spi": {
                              "type": "string"
                            },
                            "inbound_spi": {
                              "type": "string"
                            },
                            "esp_time_remaining": {
                              "type": "string"
                            },
                            "esp_port": {
                              "type": "string"
                            },
                            "phase2_algo": {
                              "type": "string"
                            },
                            "phase2_hash": {
                              "type": "string"
                            },
                            "nat_t": {
                              "type": "string"
                            },
                            "dpd": {
                              "type": "string"
                            },
                            "phase1": {
                              "type": "string"
                            },
                            "isakmp_port": {
                              "type": "string"
                            },
                            "phase1_prf": {
                              "type": "string"
                            },
                            "phase1_dh_group": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "local_subnet is invalid CIDR"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "delete": {
        "description": "Delete IPsec tunnel",
        "summary": "Delete IPsec tunnel",
        "operationId": "deleteIpsecTunnel",
        "tags": [
          "IPsec"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "tunnel_id",
            "in": "path",
            "description": "ID for tunnel",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156398145066351285906955697179258297423716",
                    "message": "tunnel id does not exist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/firewall/rules": {
      "get": {
        "description": "Get a list of current firewall rules",
        "summary": "Get firewall rules",
        "operationId": "getFirewallRules",
        "tags": [
          "Firewall"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FirewallRuleListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "FirewallRuleTuple",
                        "type": "array",
                        "description": "IPtables firewall rule represented as array [rule, position]",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a firewall rule to the VNS3 Controller's firewall",
        "summary": "Create firewall rule",
        "operationId": "createFirewallRule",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateFirewallRuleRequest",
                "type": "object",
                "required": [
                  "rule"
                ],
                "properties": {
                  "rule": {
                    "description": "New firewall rule string that needs to be compatible with a Linux \"iptables\" statement",
                    "type": "string"
                  },
                  "position": {
                    "description": "Position which the rule will be inserted in the list of Firewall rules.  Default is -1, which will post as the next rule in the list\n",
                    "type": "integer",
                    "default": -1
                  }
                }
              },
              "example": {
                "rule": "MACRO_CUST -o eth0 -s 10.199.2.0/24 -j MASQUERADE",
                "position": 0
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FirewallRuleOperationResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "FirewallRuleOperationData",
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        },
                        "rule": {
                          "type": "string"
                        },
                        "position": {
                          "type": "integer"
                        },
                        "token": {
                          "description": "Task token",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": "submitted",
                    "rule": "MACRO_CUST -o eth0 -s 10.199.2.0/24 -j MASQUERADE",
                    "token": 1.5798987631596528e+59
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564155261466915664338789304780698957922014",
                    "message": "Parse Error - iptables v1.4.21: host/network `10.199.2.0.' not found"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete firewall rule by passing the actual rule to delete\n",
        "summary": "Delete firewall rule",
        "operationId": "deleteFirewallRule",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "DeleteFirewallRuleRequest",
                "type": "object",
                "required": [
                  "rule"
                ],
                "properties": {
                  "rule": {
                    "description": "Rule to be deleted",
                    "type": "string"
                  }
                }
              },
              "example": {
                "rule": "MACRO_CUST -o eth0 -s 10.199.2.0/24 -j MASQUERADE"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1firewall~1rules/post/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "status": "submitted",
                    "position": 0,
                    "rule": "MACRO_CUST -o eth0 -s 10.199.2.0/24 -j MASQUERADE",
                    "token": 1.5641553402765172e+62
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564155261466915664338789304780698957922014",
                    "message": "either position or rule argument must be provided"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/firewall/rules/{position}": {
      "delete": {
        "description": "Delete firewall rule by position in the firewall. The firewall is 0 indexed. So deleting position 0 will remove the first rule in the firewall and the second rule will become the first.\n",
        "summary": "Delete firewall rule by position",
        "operationId": "deleteFirewallRuleByPosition",
        "tags": [
          "Firewall"
        ],
        "parameters": [
          {
            "name": "position",
            "in": "path",
            "description": "index position for firewall rule, 0 is first",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1firewall~1rules/post/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "status": "submitted",
                    "rule": "MACRO_CUST -o eth1 -s 10.0.2.0/24 -j MASQUERADE\\n",
                    "position": 0,
                    "token": 1.5641555503109367e+64
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156415545591919091797511226100046886299005",
                    "message": "position exceeds the number of rules"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/firewall/rules/subgroup": {
      "get": {
        "description": "Get a list of current firewall rules at subgroup (chained rules)\n",
        "summary": "Get firewall subgroups",
        "operationId": "getFirewallSubgroups",
        "tags": [
          "Firewall"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "name of resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "verbose",
            "description": "True for verbose output",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FirewallSubgroupListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "FirewallSubgroupRule",
                        "type": "string",
                        "description": "Begins with name and is followed by Firewall rule. This is single rule in the chain."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new firewall subgroup. Subgroups are named lists of rules that can be \"jumped to\" from  another rule. These are effectively IPtables custom chains. For example, INPUT_CUST -s 10.0.2.0/24 -j MYGROUP\n",
        "summary": "Create firewall subgroup",
        "operationId": "createFirewallSubgroup",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateFWSubgroupRequest",
                "type": "object",
                "oneOf": [
                  {
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "required": [
                      "rules"
                    ]
                  }
                ],
                "properties": {
                  "rules": {
                    "description": "Chained firewall rules seperated by \\n. Rule should be preceded by group name",
                    "type": "string"
                  },
                  "name": {
                    "description": "'name of the subgroup. Must be valid chain that begins with one of the following: PRE_C_, PST_C_, FWD_C_, INP_C_, OUT_C_.' \n",
                    "type": "string"
                  },
                  "position": {
                    "description": "Position which the chain will be inserted in the list of Firewall rules.  Default is 0, which is first in the ruleset\n",
                    "type": "integer"
                  },
                  "flush": {
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "FirewallSubgroupStatusListResponse",
                      "type": "object",
                      "properties": {
                        "response": {
                          "type": "object",
                          "properties": {
                            "rules": {
                              "type": "string",
                              "description": "Chained list of rules delimited by newline."
                            },
                            "status": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "CommandOutputResponse",
                      "type": "object",
                      "properties": {
                        "response": {
                          "title": "CommandOutput",
                          "type": "array",
                          "minItems": 3,
                          "maxItems": 3,
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "additionalProperties": true
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "response": {
                    "status": "ok",
                    "rules": "Rule 1\\n Rule 2\\n Rule 3"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564155261466915664338789304780698957922014",
                    "message": "invalid subgroup name - some bad name"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Reload firewall subgroups",
        "summary": "Reload firewall subgroups",
        "operationId": "reloadFirewallSubgroups",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "ReinitRequest",
                "type": "object",
                "properties": {
                  "reinitialize": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete Firewall subgroup by name or rules",
        "summary": "Delete firewall subgroup",
        "operationId": "deleteFirewallSubgroup",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "FirewallSubgroupDeleteRequest",
                "type": "object",
                "properties": {
                  "rules": {
                    "description": "Chained firewall rules seperated by \"\\n\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the subgroup chain. Must be valid chain name.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1server/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Chain named some BAD_NAME not found."
                  }
                }
              }
            }
          },
          "410": {
            "description": "Resource gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Chain references remain for CHAIN_NAME, although rules were deleted."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/firewall/fwsets": {
      "get": {
        "description": "Get a list of current firewall rule sets. These are IPsets that allow for faster matching of rules against IPs.  See http://ipset.netfilter.org for more details.\n",
        "summary": "Get firewall FWSets",
        "operationId": "getFirewallFWSets",
        "tags": [
          "Firewall"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "name of resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "verbose",
            "description": "True for verbose output",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FirewallFWSetListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "FirewallFWSetString",
                        "type": "string",
                        "description": "Begins with name and is followed by Firewall rules. This is an indexed rule that allows for speedy matching on IPs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new firewall FWSet for fast rule matching",
        "summary": "Create firewall FWSet",
        "operationId": "createFirewallFWSet",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateFWSetRequest",
                "type": "object",
                "properties": {
                  "rules": {
                    "description": "Chained firewall rules seperated by \"\\n\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "'name of the FWSet. Must be valid chain that begins with one of the following: NETS_, PORTS_, LIST_.' \n",
                    "type": "string"
                  },
                  "flush": {
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1firewall~1rules~1subgroup/post/responses/200/content/application~1json/schema/oneOf/1"
                    },
                    {
                      "title": "FirewallFWSetDetail",
                      "type": "object",
                      "properties": {
                        "response": {
                          "title": "FirewallFWSetData",
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "rules": {
                              "title": "FirewallFWSetString",
                              "type": "string",
                              "description": "Begins with name and is followed by Firewall rules. This is an indexed rule that allows for speedy matching on IPs"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "example": {
                    "response": {
                      "status": "ok",
                      "rules": "Rule 1\\n Rule 2\\n Rule 3"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564155261466915664338789304780698957922014",
                    "message": "invalid FWSet name - some bad name"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Reload all firewall FWsets",
        "summary": "Reload all firewall FWsets",
        "operationId": "reloadFirewallFWSets",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "ReinitRequest",
                "type": "object",
                "properties": {
                  "reinitialize": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete Firewall FWSet by name or rules",
        "summary": "Delete firewall FWSet",
        "operationId": "deleteFirewallFWSet",
        "tags": [
          "Firewall"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "FirewallFWSetDeleteRequest",
                "type": "object",
                "properties": {
                  "rules": {
                    "description": "Chained firewall rules seperated by \"\\n\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the FWSet. Must be valid chain that begins with one of the following: NETS_, PORTS_, LIST_.\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1server/put/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "status": "finished_ok"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564155261466915664338789304780698957922014",
                    "message": "More than one FWSet name found in rules"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/routes": {
      "get": {
        "description": "Describes routes that this manager has access to via its network interfaces (virtual or otherwise).  If advertized, other VNS3 Controllers will receive the route instantly. Network clients will  receive it when they get their next route push, which is normally on a re-connect or in neartime  if they use the VNS3 Routing agent on their cloud servers. Remote endpoints  (other data centers) would not receive the route unless specified as part of  their IPsec Configuration AND the Configuration of such a tunnel on the VNS3 controller.\n",
        "summary": "Get routes",
        "operationId": "getRoutes",
        "tags": [
          "Routing"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RoutesListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RoutesList",
                      "type": "object",
                      "additionalProperties": {
                        "title": "Route",
                        "type": "object",
                        "properties": {
                          "netmask": {
                            "type": "string"
                          },
                          "id": {
                            "type": "integer"
                          },
                          "cidr": {
                            "type": "string"
                          },
                          "interface": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "advertise": {
                            "type": "boolean"
                          },
                          "metric": {
                            "type": "integer"
                          },
                          "gateway": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "1": {
                      "netmask": "240.0.0.0",
                      "id": 1,
                      "cidr": "224.0.0.0/4",
                      "interface": "tun0",
                      "description": "Multicast (auto-added)",
                      "advertise": false,
                      "metric": 0
                    },
                    "2": {
                      "netmask": "255.255.255.0",
                      "id": 2,
                      "cidr": "192.168.1.0/24",
                      "gateway": "192.168.1.1",
                      "interface": "eth0",
                      "description": "US West Peer",
                      "advertise": false,
                      "metric": 0
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      },
      "post": {
        "description": "Pushes routes that this manager has access to via its network interfaces (virtual or otherwise)\n",
        "summary": "Create route",
        "operationId": "createRoute",
        "tags": [
          "Routing"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateRouteRequest",
                "type": "object",
                "required": [
                  "cidr"
                ],
                "properties": {
                  "cidr": {
                    "description": "CIDR of a route that the VNS3 Controller has access  to that it wants to publish throughout the  Routing tables of the overlay network\n",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "interface": {
                    "description": "Sets the interface where this route will be advertised.",
                    "type": "string"
                  },
                  "gateway": {
                    "description": "If interface is set, a specific gateway address reachable from that interface",
                    "type": "string"
                  },
                  "tunnel": {
                    "description": "numerical reference for the GRE endpoint id (must provide either tunnel OR interface)",
                    "type": "integer"
                  },
                  "advertise": {
                    "description": "advertise route to overlay network",
                    "type": "boolean"
                  },
                  "metric": {
                    "description": "weight for route",
                    "type": "integer"
                  }
                }
              },
              "example": {
                "cidr": "172.31.3.0/24",
                "gateway": "172.31.3.1",
                "metric": 0,
                "interface": "eth0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1routes/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "1": {
                      "netmask": "240.0.0.0",
                      "id": 1,
                      "cidr": "224.0.0.0/4",
                      "interface": "tun0",
                      "description": "Multicast (auto-added)",
                      "advertise": false,
                      "metric": 0
                    },
                    "2": {
                      "netmask": "255.255.255.0",
                      "id": 2,
                      "cidr": "192.168.1.0/24",
                      "interface": "eth0",
                      "gateway": "192.168.1.1",
                      "description": "Peer 1 subnet Gateway",
                      "advertise": false,
                      "metric": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "Validation failed: Ipsec tunnel bad tunnel ID"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "unlicensedExample": {
                    "value": {
                      "error": {
                        "name": "PrerequisiteError",
                        "log": "1563472268929826518356034508450851266833526",
                        "message": "Must be licensed first."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/routes/{route_id}": {
      "delete": {
        "description": "Delete route",
        "summary": "Delete route",
        "operationId": "deleteRoute",
        "tags": [
          "Routing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "route_id",
            "description": "ID for Route",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1routes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "bad route id or route not found"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/status/clients": {
      "get": {
        "description": "Describe overlay clients",
        "summary": "Get clients status",
        "operationId": "getClientsStatus",
        "tags": [
          "Overlay Network"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OverlayClientsListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "OverlayClientsList",
                      "type": "object",
                      "description": "Client details with IPs as keys",
                      "additionalProperties": {
                        "title": "OverlayClient",
                        "type": "object",
                        "properties": {
                          "manager_id": {
                            "type": "integer"
                          },
                          "overlay_ipaddress": {
                            "type": "string"
                          },
                          "ipaddress": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/clientpacks": {
      "get": {
        "description": "Returns detailed information about all of the clientpacks in the topology. If manager's are properly peered, this information can come from any of the controllers.",
        "summary": "Get clientpacks",
        "operationId": "getClientpacks",
        "tags": [
          "Overlay Network"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sorted",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Sort resources"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ClientpackListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ClientpackList",
                      "type": "object",
                      "additionalProperties": {
                        "title": "ClientPack",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "overlay_ipaddress": {
                            "type": "string"
                          },
                          "linux_onefile": {
                            "type": "string"
                          },
                          "enabled": {
                            "type": "boolean"
                          },
                          "conf_sha1": {
                            "type": "string"
                          },
                          "windows_onefile": {
                            "type": "string"
                          },
                          "ovpn_sha1": {
                            "type": "string"
                          },
                          "tarball_file": {
                            "type": "string"
                          },
                          "tarball_sha1": {
                            "type": "string"
                          },
                          "sequential_id": {
                            "type": "integer"
                          },
                          "checked_out": {
                            "type": "boolean"
                          },
                          "zip_sha1": {
                            "type": "string"
                          },
                          "zip_file": {
                            "type": "string"
                          },
                          "last_connect": {
                            "type": "string"
                          },
                          "last_disconnect": {
                            "type": "string"
                          },
                          "connected": {
                            "type": "boolean"
                          },
                          "tags": {
                            "type": "object",
                            "description": "Key, value object of tags",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset is missing",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "For bulk set of the enabled (true/false) state for all clientpacks and the checked_out (true/false) state for all clientpacks.  This enables a variety of work flows by calling these functions after key generation,  but before general provisioning of addresses to devivces\n",
        "summary": "Update all clientpacks",
        "operationId": "updateAllClientpacks",
        "tags": [
          "Overlay Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateConfigClientpackRequest",
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Enable or disable clientpacks.",
                    "type": "boolean"
                  },
                  "checked_out": {
                    "description": "Update whether clientpacks are checked out and thus unavailable",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateClientpacksStatusResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "UpdateClientpacksStatus",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "checked_out": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156383509848878372758564869593812797782733",
                    "message": "Argument must have a true or false value"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first.",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clientpacks/add_clientpacks": {
      "post": {
        "description": "Incrementally add new clientpacks for use",
        "summary": "Create new clientpack",
        "operationId": "createClientpack",
        "tags": [
          "Overlay Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "AddClientpackRequest",
                "type": "object",
                "required": [
                  "requested_ips"
                ],
                "properties": {
                  "requested_ips": {
                    "description": "CSV of IP addresses to be used for new clientpacks",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token~1%7Btoken_id%7D/delete/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Not enough room in license for 5 more clientpacks.",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clientpacks/{clientpack_name}": {
      "get": {
        "description": "Returns detailed information about all of the clientpacks in the topology.  If manager's are properly peered, this information can come from any of the controllers.\n",
        "summary": "Get clientpack details",
        "operationId": "getClientpack",
        "tags": [
          "Overlay Network"
        ],
        "parameters": [
          {
            "name": "clientpack_name",
            "in": "path",
            "description": "name of clientpack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ClientpackDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ClientpackDetail",
                      "type": "object",
                      "properties": {
                        "clientpack": {
                          "title": "ClientPack",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "overlay_ipaddress": {
                              "type": "string"
                            },
                            "linux_onefile": {
                              "type": "string"
                            },
                            "enabled": {
                              "type": "boolean"
                            },
                            "conf_sha1": {
                              "type": "string"
                            },
                            "windows_onefile": {
                              "type": "string"
                            },
                            "ovpn_sha1": {
                              "type": "string"
                            },
                            "tarball_file": {
                              "type": "string"
                            },
                            "tarball_sha1": {
                              "type": "string"
                            },
                            "sequential_id": {
                              "type": "integer"
                            },
                            "checked_out": {
                              "type": "boolean"
                            },
                            "zip_sha1": {
                              "type": "string"
                            },
                            "zip_file": {
                              "type": "string"
                            },
                            "last_connect": {
                              "type": "string"
                            },
                            "last_disconnect": {
                              "type": "string"
                            },
                            "connected": {
                              "type": "boolean"
                            },
                            "tags": {
                              "type": "object",
                              "description": "Key, value object of tags",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication information missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1routes/post/responses/403/content/application~1json/schema"
                },
                "examples": {
                  "unauthorizedExample": {
                    "value": {
                      "error": {
                        "name": "UnauthorizedError",
                        "log": "1563472268929826518356034508450851266833526",
                        "message": "Invalid or expired token"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset is missing",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clientpack": {
      "get": {
        "description": "Returns clientpack file. Clientpacks are files with the necessary information and credentials  for an overlay client to be connected to the VNS3 topology\n",
        "summary": "Download clientpack",
        "operationId": "getDownloadClientpack",
        "tags": [
          "Overlay Network"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "description": "name of clientpack. Typical IP address with underscores. e.g. 100_127_255_200.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileformat",
            "required": true,
            "description": "One of tarball (default), zip, conf, ovpn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clientpack file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Error",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "log": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Change properties of clientpacks; enabling or disabling, checking in or out, or regenerating",
        "summary": "Update clientpack",
        "operationId": "updateClientpack",
        "tags": [
          "Overlay Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateClientpackRequest",
                "type": "object",
                "oneOf": [
                  {
                    "required": [
                      "name",
                      "enabled"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "checked_out"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "regenerate"
                    ]
                  }
                ],
                "properties": {
                  "name": {
                    "description": "Name of the clientpack (IP snake case)",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Enable or disable clientpack.",
                    "type": "boolean"
                  },
                  "checked_out": {
                    "description": "Update whether clientpack is checked out and thus unavailable",
                    "type": "boolean"
                  },
                  "regenerate": {
                    "description": "Regenerate clientpack file. Returns a task token in the response.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateClientpack",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "response": {
                          "title": "TaskToken",
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "response": {
                          "title": "ClientPack",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "overlay_ipaddress": {
                              "type": "string"
                            },
                            "linux_onefile": {
                              "type": "string"
                            },
                            "enabled": {
                              "type": "boolean"
                            },
                            "conf_sha1": {
                              "type": "string"
                            },
                            "windows_onefile": {
                              "type": "string"
                            },
                            "ovpn_sha1": {
                              "type": "string"
                            },
                            "tarball_file": {
                              "type": "string"
                            },
                            "tarball_sha1": {
                              "type": "string"
                            },
                            "sequential_id": {
                              "type": "integer"
                            },
                            "checked_out": {
                              "type": "boolean"
                            },
                            "zip_sha1": {
                              "type": "string"
                            },
                            "zip_file": {
                              "type": "string"
                            },
                            "last_connect": {
                              "type": "string"
                            },
                            "last_disconnect": {
                              "type": "string"
                            },
                            "connected": {
                              "type": "boolean"
                            },
                            "tags": {
                              "type": "object",
                              "description": "Key, value object of tags",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156383509848878372758564869593812797782733",
                    "message": "name argument must be set"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clientpacks/next_available": {
      "post": {
        "description": "Get next sequential client pack. Provides sufficient information to call GET /clientpack.  Note, Using this resource against multiple controllers in the same topology could cause distribution of the  same clientpack to multiple overlay devices which is not allowed.\n",
        "summary": "Checkout next clientpack",
        "operationId": "postCheckoutNextClientpack",
        "tags": [
          "Overlay Network"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CalculateNextClientpackRequest",
                "type": "object",
                "properties": {
                  "low_ip": {
                    "description": "Set the lower bound for the resulting IP",
                    "type": "string"
                  },
                  "high_ip": {
                    "description": "Set the upper bound for the resulting IP",
                    "type": "string"
                  },
                  "include_disabled": {
                    "description": "Allows clientpack allocation from the disabled pool, for workflows where all clientpacks are disabled at the start.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset is missing",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/reset": {
      "post": {
        "description": "For resetting the connection of a client to a VNS3 Controller",
        "summary": "Reset client",
        "operationId": "postResetClient",
        "tags": [
          "Overlay Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "ResetOverlayClientRequest",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the clientpack as returned by the \"desc_clientpacks\" call",
                    "type": "string"
                  },
                  "disconnect": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ClientpackStatusResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ClientpackStatus",
                      "type": "object",
                      "properties": {
                        "disconnecting": {
                          "type": "string"
                        },
                        "overlay_ipaddress": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clients/reset_all": {
      "post": {
        "description": "For resetting all of the connections of clients connected to the VNS3 Controller",
        "summary": "Reset all clients",
        "operationId": "postResetAllClients",
        "tags": [
          "Overlay Network"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "BulkClientResetStatusResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "BulkClientResetStatus",
                      "type": "object",
                      "properties": {
                        "resetting": {
                          "description": "Cient IPs being reset",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clientpack/{clientpack_name}": {
      "put": {
        "description": "Force disconnect client for named clientpack",
        "summary": "Disconnect clientpack",
        "operationId": "putDisconnectClientpack",
        "tags": [
          "Overlay Network"
        ],
        "parameters": [
          {
            "name": "clientpack_name",
            "in": "path",
            "description": "name of clientpack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "DisconnetClientRequest",
                "type": "object",
                "required": [
                  "disconnect"
                ],
                "properties": {
                  "disconnect": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1client~1reset/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156383509848878372758564869593812797782733",
                    "message": "Overlay IP address 172.0.10.4 is not connected"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset is missing",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "For tagging individual clientpacks.",
        "summary": "Create clientpack tag",
        "operationId": "postCreateClientpackTag",
        "tags": [
          "Overlay Network"
        ],
        "parameters": [
          {
            "name": "clientpack_name",
            "in": "path",
            "description": "name of clientpack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateClientpackTagRequest",
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "description": "Alphanumeric characters allowed in snake_case or kebab-case",
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ClientpackTagsResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ClientpackTags",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Clientpack name",
                          "type": "string"
                        },
                        "tags": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156383509848878372758564869593812797782733",
                    "message": "bad tag key: badcharac!er!!"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset is missing",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "For deleting individual clientpack tags",
        "summary": "Delete clientpack tag",
        "operationId": "deleteClientpackTag",
        "tags": [
          "Overlay Network"
        ],
        "parameters": [
          {
            "name": "clientpack_name",
            "in": "path",
            "description": "name of clientpack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "ClientpackTagKeyRequest",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack~1%7Bclientpack_name%7D/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156383509848878372758564869593812797782733",
                    "message": "Clientpack named '10_0_100_4' does not exist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset is missing",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/peering": {
      "get": {
        "description": "Provides the status of whether a Controller is peered to other Controllers",
        "summary": "Get peering status",
        "operationId": "getPeering",
        "tags": [
          "Peering"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PeersDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "PeersDetail",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "peered": {
                          "type": "boolean"
                        },
                        "managers": {
                          "type": "object",
                          "additionalProperties": {
                            "title": "VNS3ControllerPeer",
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "not_set": {
                                "type": "boolean"
                              },
                              "self": {
                                "type": "boolean"
                              },
                              "mtu": {
                                "type": "integer"
                              },
                              "reachable": {
                                "type": "boolean"
                              },
                              "address": {
                                "type": "string"
                              },
                              "overlay_ipaddress": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "controllers": {
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/paths/~1peering/get/responses/200/content/application~1json/schema/properties/response/properties/managers/additionalProperties"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Must be licensed first",
                    "log": "9009012801280138018910283081301390103",
                    "name": "PrerequisiteError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/peering/self": {
      "put": {
        "description": "Sets the Controller ID of a controller so that it can be peered within a topology",
        "summary": "Set peering ID",
        "operationId": "putSelfPeeringId",
        "tags": [
          "Peering"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "PeerSelfRequest",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Cannot be the same as the id of another manager in the topology, and  cannot be greater than the number of controllers in the topology\n",
                    "type": "integer"
                  },
                  "force": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1peering/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "peered": true,
                  "id": 1,
                  "managers": {
                    "1": {
                      "overlay_ipaddress": "100.127.255.253",
                      "self": true
                    },
                    "2": {
                      "overlay_ipaddress": "100.127.255.252",
                      "not_set": true,
                      "id": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1563565922480638538304998251646824695267891",
                    "message": "id is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/peering/peers": {
      "post": {
        "description": "Creates a peering relationship from a controller to another controller.  The peering call is unidirectional. Reciprocal calls must be made to peer two controllers  together and complete the peering process.\n",
        "summary": "Create peer",
        "operationId": "createPeer",
        "tags": [
          "Peering"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreatePeerRequest",
                "type": "object",
                "required": [
                  "id",
                  "name"
                ],
                "properties": {
                  "id": {
                    "description": "Manager ID as an integer of the the manager you are peering with,  NOT the id of the one you are calling from\n",
                    "type": "integer"
                  },
                  "name": {
                    "description": "IP address or host name of the one you are peering with.",
                    "type": "string"
                  },
                  "overlay_mtu": {
                    "description": "link MTU between 500 and 4800. Defaults to 1500",
                    "type": "integer",
                    "minimum": 500,
                    "maximum": 48000
                  },
                  "force": {
                    "description": "Setting false will NOT finalize the peering operation.  A peer \"reconfigure\" call would then be required. Default is true\n",
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "id": 2,
                "name": "192.168.1.230"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1peering/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "5 is an invalid controller id"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/peering/peers/{peer_id}": {
      "delete": {
        "description": "Breaks a peering relationship from a controller to another controller.  The peering call is unidirectional. Reciprocal calls must be made to  fully break the peer relationship.\n",
        "summary": "Delete peer",
        "operationId": "deletePeer",
        "tags": [
          "Peering"
        ],
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "Peer ID for controller peer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1peering/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "20 is invalid as controller id."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      },
      "put": {
        "description": "Edits a peering relationship from a controller to another controller.  The peering call is unidirectional. Reciprocal calls must be made to peer two controllers  together and complete the peering process.\n",
        "summary": "Update peer",
        "operationId": "updatePeer",
        "tags": [
          "Peering"
        ],
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "Peer ID for controller peer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdatePeerRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "IP address or host name of the one you are peering with.",
                    "type": "string"
                  },
                  "overlay_mtu": {
                    "description": "link MTU between 500 and 4800",
                    "type": "integer",
                    "minimum": 500,
                    "maximum": 48000
                  },
                  "force": {
                    "description": "Setting false will NOT finalize the peering operation.  A peer \"reconfigure\" call would then be required. Default is true\n",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1peering/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156348346294205629750334447737345166168929",
                    "message": "mtu must be an integer between 500 and 48,000"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      }
    },
    "/interfaces": {
      "get": {
        "description": "(BETA) Describe all physical and virtual interfaces, both system and edge GRE interfaces",
        "summary": "Get all interfaces",
        "operationId": "getInterfaces",
        "tags": [
          "Interfaces"
        ],
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SystemInterfaceListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "SystemInterface",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "interface_type": {
                            "description": "system or system_virtual",
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "ip_internal": {
                            "type": "string"
                          },
                          "mtu": {
                            "type": "integer"
                          },
                          "enabled": {
                            "type": "boolean"
                          },
                          "status": {
                            "description": "Availability of interface, Up or Down",
                            "type": "string"
                          },
                          "mask_bits": {
                            "type": "string"
                          },
                          "gateway": {
                            "type": "string",
                            "nullable": true
                          },
                          "system_default": {
                            "type": "boolean"
                          },
                          "ip_external": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": [
                    {
                      "id": 4,
                      "name": "eth0",
                      "interface_type": "system",
                      "description": "Auto-created interface",
                      "ip_internal": "192.168.1.211",
                      "mtu": 9001,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 24,
                      "gateway": null,
                      "system_default": true,
                      "ip_external": "3.222.68.251",
                      "tags": []
                    },
                    {
                      "id": 5,
                      "name": "lo",
                      "interface_type": "system",
                      "description": "Auto-created interface",
                      "ip_internal": "127.0.0.1",
                      "mtu": 65536,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 8,
                      "gateway": null,
                      "system_default": true,
                      "ip_external": null,
                      "tags": []
                    },
                    {
                      "id": 7,
                      "name": "eth0:0",
                      "interface_type": "system",
                      "description": "This interface used as IPsec loopback via Local Private IP",
                      "ip_internal": "192.168.1.230",
                      "mtu": 9001,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 31,
                      "gateway": null,
                      "system_default": true,
                      "ip_external": null,
                      "tags": []
                    },
                    {
                      "id": 6,
                      "name": "plugin0",
                      "interface_type": "system_virtual",
                      "description": "Auto-created interface",
                      "ip_internal": "198.51.100.1",
                      "mtu": 1500,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 28,
                      "gateway": null,
                      "system_default": false,
                      "ip_external": null,
                      "tags": []
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/interfaces/action": {
      "post": {
        "description": "Take action on interfaces collection. Only one action can be taken per request. The available actions are discovering new adapters, new IPs and resync-ing interfaces state with system.\n",
        "summary": "Take action on all interfaces",
        "operationId": "takeInterfacesAction",
        "tags": [
          "Interfaces"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "InterfaceActionRequest",
                "type": "object",
                "properties": {
                  "discover_new_primary_adapters": {
                    "description": "Run discovery for new primary adapters",
                    "type": "boolean"
                  },
                  "discover_ips": {
                    "type": "boolean"
                  },
                  "manage_overlay_interfaces": {
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "discover_ips": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SimpleStringListResponse",
                  "type": "array",
                  "description": "Array of string representation of resource",
                  "items": {
                    "type": "string"
                  }
                },
                "example": {
                  "response": [
                    "eth0"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564080470480314545899327872576171314749135",
                    "message": "discover_ips is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/interfaces/system": {
      "get": {
        "description": "Get system interfaces",
        "summary": "Get all system interfaces",
        "operationId": "getSystemInterfaces",
        "tags": [
          "Interfaces"
        ],
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1interfaces/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": [
                    {
                      "id": 4,
                      "name": "eth0",
                      "interface_type": "system",
                      "description": "Auto-created interface",
                      "ip_internal": "192.168.1.211",
                      "mtu": 9001,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 24,
                      "gateway": null,
                      "system_default": true,
                      "ip_external": "3.222.68.251",
                      "tags": []
                    },
                    {
                      "id": 5,
                      "name": "lo",
                      "interface_type": "system",
                      "description": "Auto-created interface",
                      "ip_internal": "127.0.0.1",
                      "mtu": 65536,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 8,
                      "gateway": null,
                      "system_default": true,
                      "ip_external": null,
                      "tags": []
                    },
                    {
                      "id": 7,
                      "name": "eth0:0",
                      "interface_type": "system",
                      "description": "This interface used as IPsec loopback via Local Private IP",
                      "ip_internal": "192.168.1.230",
                      "mtu": 9001,
                      "enabled": true,
                      "status": "Up",
                      "mask_bits": 31,
                      "gateway": null,
                      "system_default": true,
                      "ip_external": null,
                      "tags": []
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "post": {
        "description": "Create new system interface",
        "summary": "Create system interface",
        "operationId": "createSystemInterface",
        "tags": [
          "Interfaces"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ip_internal": {
                    "type": "string"
                  },
                  "ip_external": {
                    "type": "string",
                    "nullable": true
                  },
                  "mtu": {
                    "type": "integer"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": false
                  },
                  "mask_bits": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string",
                    "nullable": true
                  },
                  "system_default": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SystemInterfaceDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "SystemInterface",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "interface_type": {
                          "description": "system or system_virtual",
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "ip_internal": {
                          "type": "string"
                        },
                        "mtu": {
                          "type": "integer"
                        },
                        "enabled": {
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Availability of interface, Up or Down",
                          "type": "string"
                        },
                        "mask_bits": {
                          "type": "string"
                        },
                        "gateway": {
                          "type": "string",
                          "nullable": true
                        },
                        "system_default": {
                          "type": "boolean"
                        },
                        "ip_external": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "id": 16,
                    "name": "tun1:1",
                    "interface_type": "system_virtual",
                    "description": "",
                    "ip_internal": "192.168.1.250",
                    "mtu": 9001,
                    "enabled": true,
                    "status": "Up",
                    "mask_bits": "32",
                    "gateway": null,
                    "system_default": true,
                    "ip_external": null,
                    "tags": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564080470480314545899327872576171314749135",
                    "message": "mtu must be an integer"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/interfaces/system/{interface_id}": {
      "get": {
        "description": "Get interface details by name",
        "summary": "Get system interface",
        "operationId": "getSystemInterface",
        "tags": [
          "Interfaces"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "description": "ID for system interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1interfaces~1system/post/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "id": 4,
                    "name": "eth0",
                    "interface_type": "system",
                    "description": "Auto-created interface",
                    "ip_internal": "192.168.1.211",
                    "mtu": 9001,
                    "enabled": true,
                    "status": "Up",
                    "mask_bits": 24,
                    "gateway": null,
                    "system_default": true,
                    "ip_external": "3.222.68.251",
                    "tags": []
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "System interface not found"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update system interface",
        "summary": "Update system interface",
        "operationId": "updateSystemInterface",
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "description": "ID for system interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Interfaces"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ip_internal": {
                    "type": "string"
                  },
                  "ip_external": {
                    "type": "string",
                    "nullable": true
                  },
                  "mtu": {
                    "type": "integer"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": false
                  },
                  "mask_bits": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string",
                    "nullable": true
                  },
                  "system_default": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1interfaces~1system/post/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "id": 16,
                    "name": "tun1:1",
                    "interface_type": "system_virtual",
                    "description": "Custom interface created",
                    "ip_internal": "192.168.1.250",
                    "mtu": 9001,
                    "enabled": true,
                    "status": "Up",
                    "mask_bits": "32",
                    "gateway": null,
                    "system_default": true,
                    "ip_external": null,
                    "tags": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564080470480314545899327872576171314749135",
                    "message": "ip_internal must be available"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "delete": {
        "description": "Delete system interface",
        "summary": "Delete system interface",
        "operationId": "deleteSystemInterface",
        "tags": [
          "Interfaces"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "description": "ID for system interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1interfaces~1system/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "System Interface not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interfaces/edge_gre": {
      "get": {
        "description": "Get Edge GRE interface details",
        "summary": "Get Edge GRE interfaces",
        "operationId": "getGREInterfaces",
        "tags": [
          "Interfaces"
        ],
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GREEndpointListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "GREEndpoint",
                        "allOf": [
                          {
                            "title": "GREEndpointParams",
                            "type": "object",
                            "properties": {
                              "endpoint_name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "ip_internal": {
                                "type": "string"
                              },
                              "mtu": {
                                "type": "integer"
                              },
                              "enabled": {
                                "type": "boolean",
                                "default": false
                              },
                              "mask_bits": {
                                "type": "string"
                              },
                              "system_default": {
                                "type": "boolean",
                                "default": false
                              },
                              "local_connection_ip": {
                                "type": "string"
                              },
                              "remote_connection_ip": {
                                "type": "string"
                              },
                              "ttl": {
                                "type": "integer",
                                "default": 255
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "post": {
        "description": "Create new edge GRE interface",
        "summary": "Create edge GRE interface",
        "operationId": "createGREInterface",
        "tags": [
          "Interfaces"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "GREEndpointParams",
                "type": "object",
                "properties": {
                  "endpoint_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ip_internal": {
                    "type": "string"
                  },
                  "mtu": {
                    "type": "integer"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": false
                  },
                  "mask_bits": {
                    "type": "string"
                  },
                  "system_default": {
                    "type": "boolean",
                    "default": false
                  },
                  "local_connection_ip": {
                    "type": "string"
                  },
                  "remote_connection_ip": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer",
                    "default": 255
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GREEndpoint",
                  "allOf": [
                    {
                      "title": "GREEndpointParams",
                      "type": "object",
                      "properties": {
                        "endpoint_name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "ip_internal": {
                          "type": "string"
                        },
                        "mtu": {
                          "type": "integer"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": false
                        },
                        "mask_bits": {
                          "type": "string"
                        },
                        "system_default": {
                          "type": "boolean",
                          "default": false
                        },
                        "local_connection_ip": {
                          "type": "string"
                        },
                        "remote_connection_ip": {
                          "type": "string"
                        },
                        "ttl": {
                          "type": "integer",
                          "default": 255
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564080470480314545899327872576171314749135",
                    "message": "'ttl' must be between 1 and 255"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/interfaces/edge_gre/{interface_id}": {
      "get": {
        "description": "Get GRE interface details by id or name",
        "summary": "Get GRE interface details",
        "operationId": "getGREInterface",
        "tags": [
          "Interfaces"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "description": "ID for system interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GREEndpointDetail",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "GREEndpoint",
                      "allOf": [
                        {
                          "title": "GREEndpointParams",
                          "type": "object",
                          "properties": {
                            "endpoint_name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "ip_internal": {
                              "type": "string"
                            },
                            "mtu": {
                              "type": "integer"
                            },
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "mask_bits": {
                              "type": "string"
                            },
                            "system_default": {
                              "type": "boolean",
                              "default": false
                            },
                            "local_connection_ip": {
                              "type": "string"
                            },
                            "remote_connection_ip": {
                              "type": "string"
                            },
                            "ttl": {
                              "type": "integer",
                              "default": 255
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "GRE Endpoint not found"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update GRE interface",
        "summary": "Update GRE interface",
        "operationId": "updateGREInterface",
        "tags": [
          "Interfaces"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "description": "ID for system interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "GREEndpointParams",
                "type": "object",
                "properties": {
                  "endpoint_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ip_internal": {
                    "type": "string"
                  },
                  "mtu": {
                    "type": "integer"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": false
                  },
                  "mask_bits": {
                    "type": "string"
                  },
                  "system_default": {
                    "type": "boolean",
                    "default": false
                  },
                  "local_connection_ip": {
                    "type": "string"
                  },
                  "remote_connection_ip": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer",
                    "default": 255
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1interfaces~1edge_gre~1%7Binterface_id%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "1564080470480314545899327872576171314749135",
                    "message": "'ttl' must be between 1 and 255"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "delete": {
        "description": "Delete GRE Interface",
        "summary": "Delete GRE interface",
        "operationId": "deleteGREInterface",
        "tags": [
          "Interfaces"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "description": "ID for system interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1interfaces~1edge_gre~1%7Binterface_id%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "GRE Endpoint not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/snapshots": {
      "get": {
        "description": "Get list of snapshots",
        "summary": "Get snapshots",
        "operationId": "getSnapshot",
        "tags": [
          "Snapshots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SnapshotsListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "SnapshotsList",
                      "type": "object",
                      "properties": {
                        "latest_snapshot": {
                          "description": "Name of the latest snapshot taken",
                          "type": "string"
                        },
                        "snapshots": {
                          "type": "object",
                          "additionalProperties": {
                            "title": "Snapshot",
                            "type": "object",
                            "properties": {
                              "sha1_checksum": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string"
                              },
                              "created_at_i": {
                                "type": "integer"
                              },
                              "size": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "latest_snapshot": "snapshot_20140117_1389943293_50.240.142.209",
                    "snapshots": {
                      "snapshot_20140117_1389943258_50.240.142.209": {
                        "sha1_checksum": "0ea0e930b96a6276b8dcb23d39378128784da557",
                        "created_at": "2014/01/17 01:20:58 -0600",
                        "created_at_i": 1389943258,
                        "size": 334120
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          }
        }
      },
      "post": {
        "description": "Create a new snapshot",
        "summary": "Create snapshot",
        "operationId": "createSnapshot",
        "tags": [
          "Snapshots"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateSnapshotRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of file. Defaults to a timestamped name",
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "custom_snapshot_name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SnapshotsDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "SnapshotsDetail",
                      "type": "object",
                      "additionalProperties": {
                        "title": "Snapshot",
                        "type": "object",
                        "properties": {
                          "sha1_checksum": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "created_at_i": {
                            "type": "integer"
                          },
                          "size": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "snapshot_name": {
                      "sha1_checksum": "adc8052f3c0f618b9b1f9564aaa76bf8ce0bd381",
                      "created_at": "2016-11-22T16:23:11.000Z",
                      "created_at_i": 1479831791,
                      "size": 957078
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Maximum number of snapshots reached.",
                    "log": "1563472268929826518356034508450851266833526",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/snapshots/{snapshot_name}": {
      "get": {
        "description": "Download snapshot file",
        "summary": "Download snapshot",
        "operationId": "getDownloadSnapshot",
        "tags": [
          "Snapshots"
        ],
        "parameters": [
          {
            "name": "snapshot_name",
            "in": "path",
            "description": "name of Snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "snapshot not found"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete named snapshot",
        "summary": "Delete snapshot",
        "operationId": "deleteSnapshot",
        "tags": [
          "Snapshots"
        ],
        "parameters": [
          {
            "name": "snapshot_name",
            "in": "path",
            "description": "name of Snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1snapshots/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1routes/post/responses/403"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "snapshot not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/snapshots/running_config": {
      "put": {
        "description": "Import snapshot into the manager and triggers a reboot for the Configuration to take effect.",
        "summary": "Import snapshot",
        "operationId": "putImportSnapshot",
        "tags": [
          "Snapshots"
        ],
        "requestBody": {
          "description": "Snapshot file",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SnapshotImportStatusResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "SnapshotImportStatus",
                      "type": "object",
                      "properties": {
                        "snapshot": {
                          "description": "Status of import",
                          "type": "string"
                        },
                        "log_lines": {
                          "description": "Log details if failed",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Keyset present - snapshot import not allowed",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system": {
      "get": {
        "description": "Retrieve status of container system",
        "summary": "Get container system status",
        "operationId": "getContainerSystemStatus",
        "tags": [
          "Network Edge Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ContainerSystemStatusDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ContainerSystemStatus",
                      "type": "object",
                      "properties": {
                        "network": {
                          "description": "Local network in CIDR notation container system is running on",
                          "type": "string"
                        },
                        "running": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "running": true,
                    "network": "172.0.20.0/28"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Configures the container network.",
        "summary": "Update container system",
        "operationId": "updateContainerSystem",
        "tags": [
          "Network Edge Plugins"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateConfigureContainerSystemRequest",
                "type": "object",
                "required": [
                  "network"
                ],
                "properties": {
                  "network": {
                    "description": "Subnet CIDR that will be used for the container network.",
                    "type": "string"
                  }
                }
              },
              "example": {
                "network": "172.0.10.0/28"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1container_system/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "running": true,
                    "network": "172.0.10.0/28"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Take action on container system. Supported actions are start and stop.",
        "summary": "Take action on container system",
        "operationId": "postContainerSystemAction",
        "tags": [
          "Network Edge Plugins"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "ContainerSystemActionRequest",
                "type": "object",
                "required": [
                  "action"
                ],
                "properties": {
                  "action": {
                    "description": "argument to pass",
                    "type": "string",
                    "enum": [
                      "start",
                      "stop"
                    ]
                  }
                }
              },
              "example": {
                "action": "stop"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1container_system/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "running": false,
                    "network": "172.0.20.0/28"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347731532179638778333642624237974834407",
                    "message": "action bad or missing, nothing to do"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system/ip_addresses": {
      "get": {
        "description": "Retrieve IP address list for current container network configuration  and address status (e.g. available)\n",
        "summary": "Get container system IP addresses",
        "operationId": "getContainerSystemIPs",
        "tags": [
          "Network Edge Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ContainerSystemIPListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ContainerSystemIPList",
                      "type": "object",
                      "properties": {
                        "addresses": {
                          "type": "array",
                          "items": {
                            "title": "ContainerSystemIP",
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system/images": {
      "get": {
        "description": "Get list of existing container system images",
        "summary": "Get container images",
        "operationId": "getContainerImages",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "uuid",
            "schema": {
              "type": "string"
            },
            "description": "UUID for Container"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ContainerImageListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ContainerImageList",
                      "type": "object",
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "title": "ContainerImage",
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "nullable": true
                              },
                              "image_name": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "status_msg": {
                                "type": "string"
                              },
                              "import_id": {
                                "type": "string"
                              },
                              "created": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "description": {
                                "type": "string"
                              },
                              "tag_name": {
                                "type": "string"
                              },
                              "comment": {
                                "type": "string"
                              },
                              "container_config": {
                                "title": "ContainerConfig",
                                "type": "object",
                                "additionalProperties": true,
                                "properties": {
                                  "Entrypoint": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "Dns": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "OpenStdin": {
                                    "type": "boolean"
                                  },
                                  "StdinOnce": {
                                    "type": "boolean"
                                  },
                                  "AttachStderr": {
                                    "type": "boolean"
                                  },
                                  "AttachStdout": {
                                    "type": "boolean"
                                  },
                                  "AttachStdin": {
                                    "type": "boolean"
                                  },
                                  "Env": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "User": {
                                    "type": "string"
                                  },
                                  "Tty": {
                                    "type": "boolean"
                                  },
                                  "ExposedPorts": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "Memory": {
                                    "type": "integer"
                                  },
                                  "MemorySwap": {
                                    "type": "integer"
                                  },
                                  "VolumesFrom": {
                                    "type": "string"
                                  },
                                  "Volumes": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "Cmd": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "PortSpecs": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "Image": {
                                    "type": "string"
                                  },
                                  "WorkingDir": {
                                    "type": "string"
                                  },
                                  "CpuShares": {
                                    "type": "integer"
                                  },
                                  "NetworkDisabled": {
                                    "type": "boolean"
                                  },
                                  "Domainname": {
                                    "type": "string"
                                  },
                                  "OnBuild": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "Hostname": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Invalid server state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container system is not running",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "StandardError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create new container image",
        "summary": "Create container image",
        "operationId": "createContainerImage",
        "tags": [
          "Network Edge Plugins"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateContainerImageRequest",
                "type": "object",
                "oneOf": [
                  {
                    "required": [
                      "name",
                      "url"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "buildurl"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "localbuild"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "localimage"
                    ]
                  }
                ],
                "properties": {
                  "name": {
                    "description": "Name of the image",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL of the image file to be imported",
                    "type": "string"
                  },
                  "buildurl": {
                    "description": "URL of a dockerfile that will be used to build the image",
                    "type": "string"
                  },
                  "localbuild": {
                    "description": "Local build file to create new image",
                    "type": "string"
                  },
                  "localimage": {
                    "description": "Local image to tag",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateImageDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "CreateImageDetail",
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        },
                        "import_uuid": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": "Image being uploaded",
                    "import_uuid": "3c4faa02b17a15a0776f53e66337a1baa37fffe9afdb7a03a2886bdb25a6b319"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347731532179638778333642624237974834407",
                    "message": "Duplicate name -- name must be unique."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container image limit reached - maximum stored images allowed: 5; currently stored 5",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system/images/{uuid}": {
      "put": {
        "description": "Edits container image",
        "summary": "Update container image",
        "operationId": "updateContainerImage",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateContainerImageRequest",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the image",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the container image",
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "New image name",
                "description": "new image description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateContainerImageDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "UpdateContainerImageDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "uuid": "8a11af14365a57d050c06821f4caa00865461334ca2598ca38d4b4bda9ce3b12",
                    "status": "Image updated"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347731532179638778333642624237974834407",
                    "message": "Duplicate name -- name must be unique."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete container image",
        "summary": "Delete container image",
        "operationId": "deleteContainerImage",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "force operation with cleanup"
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteContainerImageDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "DeleteContainerImageDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "image_deleted": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "uuid": "8a11af14365a57d050c06821f4caa00865461334ca2598ca38d4b4bda9ce3b12",
                    "image_deleted": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system/containers": {
      "get": {
        "description": "Provides description information for one or all allocated containers",
        "summary": "Get running containers",
        "operationId": "getContainers",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "show_all",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Boolean for full list output of containers"
          },
          {
            "in": "query",
            "name": "uuid",
            "schema": {
              "type": "string"
            },
            "description": "UUID for resource"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RunningContainersDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RunningContainersDetail",
                      "type": "object",
                      "properties": {
                        "containers": {
                          "type": "array",
                          "items": {
                            "title": "Container",
                            "type": "object",
                            "properties": {
                              "ID": {
                                "type": "string"
                              },
                              "Created": {
                                "type": "string"
                              },
                              "Path": {
                                "type": "string"
                              },
                              "Args": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "Config": {
                                "title": "ContainerConfig",
                                "type": "object",
                                "additionalProperties": true,
                                "properties": {
                                  "Entrypoint": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "Dns": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "OpenStdin": {
                                    "type": "boolean"
                                  },
                                  "StdinOnce": {
                                    "type": "boolean"
                                  },
                                  "AttachStderr": {
                                    "type": "boolean"
                                  },
                                  "AttachStdout": {
                                    "type": "boolean"
                                  },
                                  "AttachStdin": {
                                    "type": "boolean"
                                  },
                                  "Env": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "User": {
                                    "type": "string"
                                  },
                                  "Tty": {
                                    "type": "boolean"
                                  },
                                  "ExposedPorts": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "Memory": {
                                    "type": "integer"
                                  },
                                  "MemorySwap": {
                                    "type": "integer"
                                  },
                                  "VolumesFrom": {
                                    "type": "string"
                                  },
                                  "Volumes": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "Cmd": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "PortSpecs": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "Image": {
                                    "type": "string"
                                  },
                                  "WorkingDir": {
                                    "type": "string"
                                  },
                                  "CpuShares": {
                                    "type": "integer"
                                  },
                                  "NetworkDisabled": {
                                    "type": "boolean"
                                  },
                                  "Domainname": {
                                    "type": "string"
                                  },
                                  "OnBuild": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "Hostname": {
                                    "type": "string"
                                  }
                                }
                              },
                              "State": {
                                "type": "object",
                                "properties": {
                                  "Running": {
                                    "type": "boolean"
                                  },
                                  "Pid": {
                                    "type": "integer"
                                  },
                                  "ExitCode": {
                                    "type": "integer"
                                  },
                                  "StartedAt": {
                                    "type": "string"
                                  },
                                  "FinishedAt": {
                                    "type": "string"
                                  },
                                  "Ghost": {
                                    "type": "boolean"
                                  }
                                }
                              },
                              "Image": {
                                "type": "string"
                              },
                              "NetworkSettings": {
                                "type": "object",
                                "properties": {
                                  "IPAddress": {
                                    "type": "string"
                                  },
                                  "IPPrefixLen": {
                                    "type": "integer"
                                  },
                                  "Gateway": {
                                    "type": "string"
                                  },
                                  "Bridge": {
                                    "type": "string"
                                  },
                                  "PortMapping": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  },
                                  "Ports": {
                                    "type": "object",
                                    "nullable": true,
                                    "additionalProperties": true
                                  }
                                }
                              },
                              "ResolvConfPath": {
                                "type": "string"
                              },
                              "HostnamePath": {
                                "type": "string"
                              },
                              "HostsPath": {
                                "type": "string"
                              },
                              "Name": {
                                "type": "string"
                              },
                              "Driver": {
                                "type": "string"
                              },
                              "ExecDriver": {
                                "type": "string"
                              },
                              "Volumes": {
                                "type": "object",
                                "nullable": true,
                                "additionalProperties": true
                              },
                              "VolumesRW": {
                                "type": "object",
                                "nullable": true,
                                "additionalProperties": true
                              },
                              "HostConfig": {
                                "type": "object",
                                "nullable": true,
                                "additionalProperties": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container support not available",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create (allocate) a new container or start an existing one",
        "summary": "Start container",
        "operationId": "postRunContainer",
        "tags": [
          "Network Edge Plugins"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "AllocateContainerRequest",
                "oneOf": [
                  {
                    "required": [
                      "uuid"
                    ]
                  },
                  {
                    "required": [
                      "image_uuid",
                      "name",
                      "command"
                    ]
                  }
                ],
                "type": "object",
                "properties": {
                  "uuid": {
                    "description": "Id of container if present",
                    "type": "string"
                  },
                  "image_uuid": {
                    "description": "Container image from which to allocate container",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name for the allocated container",
                    "type": "string"
                  },
                  "ipaddress": {
                    "description": "IP address to use for container",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "command": {
                    "description": "Command used to run container",
                    "type": "string"
                  },
                  "environment": {
                    "description": "Environment string to pass to container",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RunContainerDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "RunContainerDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "container_started": {
                          "type": "boolean"
                        },
                        "ip_addr": {
                          "type": "string"
                        },
                        "status": {
                          "description": "Container system status for allocated container",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "uuid": "a0df70a7ae3f52cdf33d8ee1003b7c2c982f9cba018caf29f6be043741044139",
                    "container_started": true,
                    "ip_addr": "172.0.10.4",
                    "status": "Running"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "156347731532179638778333642624237974834407",
                    "message": "Required field missing. Either 'name', 'command', 'image_uuid' must be passed or 'uuid'"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Container run limit reached - maximum running containers allowed: 10; currently running 10",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system/containers/{uuid}": {
      "put": {
        "description": "Stops a running container",
        "summary": "Stop container",
        "operationId": "putStopContainer",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StopContainerDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "StopContainerDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "status": {
                          "description": "Container system status for allocated container",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "uuid": "a0df70a7ae3f52cdf33d8ee1003b7c2c982f9cba018caf29f6be043741044139",
                    "status": "Stopped"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Stop and delete container",
        "summary": "Delete container",
        "operationId": "deleteContainer",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteContainerDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "DeleteContainerDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "container_deleted": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "uuid": "afee0b2ce700770581b5f1a80beb01f2a33e35b8f62c43738203a275c70a40f0",
                    "container_deleted": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/container_system/containers/{uuid}/commit": {
      "post": {
        "description": "Creates a new container image from a running container",
        "summary": "Commit container",
        "operationId": "postCommitContainer",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CommitContainerRequest",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of new image",
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateContainerImageResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "CreateContainerImageDetail",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "description": "ID of the new image",
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "uuid": "e65dfe85fed9826a0649e241aa7c57f09b0bcb9eef638fec3a7d75cfa368e1b7",
                    "name": "app2_version_1.2.3"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "403": {
            "description": "Request Forbidden - operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "response": {
                    "message": "Unable to commit to new image, container image limit reached - maximum stored images allowed: 5; currently stored 5",
                    "log": "123901290309083024802120939123901023091239",
                    "name": "OperationNotAllowedError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/container_system/containers/{uuid}/logs": {
      "get": {
        "description": "Fetch containers log messages",
        "summary": "Get container logs",
        "operationId": "getContainerLogs",
        "tags": [
          "Network Edge Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "uuid of resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "lines",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of log lines to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ContainerLogsResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "ContainerLogs",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "logs": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ipsec/endpoints/{endpoint_id}/ebgp_peers": {
      "post": {
        "description": "Create new BGP peer connection for IPsec endpoint",
        "summary": "Create BGP Peer",
        "operationId": "createBGPPeer",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateBGPPeerRequest",
                "type": "object",
                "required": [
                  "ipaddress",
                  "asn"
                ],
                "properties": {
                  "ipaddress": {
                    "description": "IP address of the desired BGP peer.",
                    "type": "string"
                  },
                  "asn": {
                    "description": "Autonomous system number assigned to device at ipaddress",
                    "type": "integer"
                  },
                  "access_list": {
                    "description": "List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"",
                    "type": "string"
                  },
                  "bgp_password": {
                    "description": "String to be agreed upon by both peers as a simple password.",
                    "type": "string"
                  },
                  "add_network_distance": {
                    "description": "Enable network distance for BGP peer",
                    "type": "boolean"
                  },
                  "add_network_distance_direction": {
                    "description": "Add distance direction for BGP peer",
                    "type": "string"
                  },
                  "add_network_distance_hops": {
                    "description": "Distance metric weight indicating distance in hops for BGP peer",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "105308145066358823906955697179258509823716",
                    "message": "asn is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/ipsec/endpoints/{endpoint_id}/ebgp_peers/{bgp_peer_id}": {
      "get": {
        "description": "Get eBGP peer details",
        "summary": "Get eBGP peer",
        "operationId": "geteBGPPeer",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "path",
            "name": "bgp_peer_id",
            "description": "ID for BGP peer",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "verbose",
            "description": "True for verbose output",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "title": "BGPPeerResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "BGPPeer",
                      "type": "object",
                      "properties": {
                        "asn": {
                          "type": "integer"
                        },
                        "ipaddress": {
                          "type": "string"
                        },
                        "access_list": {
                          "description": "List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"",
                          "type": "string"
                        },
                        "id": {
                          "type": "integer"
                        },
                        "bgp_password": {
                          "type": "string"
                        },
                        "add_network_distance": {
                          "type": "boolean"
                        },
                        "add_network_distance_direction": {
                          "type": "string",
                          "description": "in or out"
                        },
                        "add_network_distance_hops": {
                          "type": "integer"
                        },
                        "connection_detail": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "put": {
        "description": "Edit IPsec endpoint BGP peer connection parameters",
        "summary": "Update BGP Peer",
        "operationId": "updateBGPPeer",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "path",
            "name": "bgp_peer_id",
            "description": "ID for BGP peer",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateBGPPeerRequest",
                "type": "object",
                "required": [
                  "ipaddress",
                  "asn"
                ],
                "properties": {
                  "ipaddress": {
                    "description": "IP address of the desired BGP peer.",
                    "type": "string"
                  },
                  "asn": {
                    "description": "Autonomous system number assigned to device at ipaddress",
                    "type": "integer"
                  },
                  "access_list": {
                    "description": "List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"",
                    "type": "string"
                  },
                  "bgp_password": {
                    "description": "String to be agreed upon by both peers as a simple password.",
                    "type": "string"
                  },
                  "add_network_distance": {
                    "description": "Enable network distance for BGP peer",
                    "type": "boolean"
                  },
                  "add_network_distance_direction": {
                    "description": "Add distance direction for BGP peer",
                    "type": "string"
                  },
                  "add_network_distance_hops": {
                    "description": "Distance metric weight indicating distance in hops for BGP peer",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "105308145066358823906955697179258509823716",
                    "message": "add_network_distance_hops is invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      },
      "delete": {
        "description": "Delete BGP Peer connection for IPsec endpoint",
        "summary": "Delete BGP Peer",
        "operationId": "deleteBGPPeer",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "ID for IPsec endpoint",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "path",
            "name": "bgp_peer_id",
            "description": "ID for BGP peer",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ipsec~1endpoints/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request indicating BGP peer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APIArgumentError",
                    "log": "105308145066358823906955697179258509823716",
                    "message": "bgp_peer does not exist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "description": "Retrieve all webhooks",
        "summary": "Get all webhooks",
        "operationId": "getWebhooks",
        "tags": [
          "Monitoring and Alerting"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WebhooksListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "WebhookIntegration",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "validate_cert": {
                            "type": "boolean"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "url": {
                            "type": "string"
                          },
                          "body": {
                            "type": "string"
                          },
                          "custom_properties": {
                            "type": "array",
                            "items": {
                              "title": "WebhookCustomProperty",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "headers": {
                            "type": "array",
                            "items": {
                              "title": "WebhookHeader",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "type": "array",
                            "items": {
                              "title": "WebhookParameter",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "description": "Create new Webhook integration. Webhooks are endpoints for posting alerts.",
        "summary": "Create new webhook integration",
        "operationId": "createWebhook",
        "tags": [
          "Monitoring and Alerting"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateWebookRequest",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "default": [
                      "tunnel_up",
                      "tunnel_down"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "body": {
                    "type": "string",
                    "description": "Serialized HTTP Post request body"
                  },
                  "validate_cert": {
                    "type": "boolean"
                  },
                  "custom_properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "headers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WebhookDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "WebhookIntegration",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "validate_cert": {
                          "type": "boolean"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "url": {
                          "type": "string"
                        },
                        "body": {
                          "type": "string"
                        },
                        "custom_properties": {
                          "type": "array",
                          "items": {
                            "title": "WebhookCustomProperty",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "headers": {
                          "type": "array",
                          "items": {
                            "title": "WebhookHeader",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "parameters": {
                          "type": "array",
                          "items": {
                            "title": "WebhookParameter",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/webhook/{webhook_id}": {
      "get": {
        "description": "Retrieve details for single webhook integration",
        "summary": "Get webhook details",
        "operationId": "getWebhook",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "description": "ID for webhook integration",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1webhook/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested webhook does not exist"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Edit defined webhook integration",
        "summary": "Update webhook configuration",
        "operationId": "updateWebhook",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "description": "ID for webhook integration",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateWebhookRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "default": [
                      "tunnel_up",
                      "tunnel_down"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "body": {
                    "type": "string",
                    "description": "Serialized HTTP Post request body"
                  },
                  "validate_cert": {
                    "type": "boolean"
                  },
                  "custom_properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "headers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1webhook/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested webhook does not exist"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete defined webhook integration.",
        "summary": "Delete webhook",
        "operationId": "deleteWebhook",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "description": "ID for webhook integration",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1webhook/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested webhook does not exist"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts": {
      "get": {
        "description": "Retrieve all alerts",
        "summary": "Get all alerts",
        "operationId": "getAlerts",
        "tags": [
          "Monitoring and Alerting"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AlertsListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "Alert",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "enabled": {
                            "type": "boolean"
                          },
                          "webhook_id": {
                            "type": "integer"
                          },
                          "template_id": {
                            "type": "integer"
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "custom_properties": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/alert": {
      "post": {
        "description": "Define new alert. Events will trigger this alert and an alert will be pushed to webhook endpoint.\n",
        "summary": "Define new alert",
        "operationId": "createAlertDefinition",
        "tags": [
          "Monitoring and Alerting"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateAlertRequest",
                "type": "object",
                "oneOf": [
                  {
                    "required": [
                      "name",
                      "url",
                      "webhook_id"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "url",
                      "template_id"
                    ]
                  }
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "webhook_id": {
                    "type": "integer"
                  },
                  "template_id": {
                    "type": "integer"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "custom_properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "required"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ms/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/alert/{alert_id}": {
      "get": {
        "description": "Retrieve details for single alert",
        "summary": "Get alert definition details",
        "operationId": "getAlertDefinition",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "description": "ID for Alert definition",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ms/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested alert does not exist"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Edit defined alert",
        "summary": "Edit alert definition",
        "operationId": "updateAlertDefinition",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "description": "ID for Alert definition",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateAlertRequest",
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "webhook_id": {
                    "type": "integer"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "custom_properties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ms/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested alert does not exist"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete defined alert",
        "summary": "Delete alert",
        "operationId": "deleteAlertDefinition",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "description": "ID for Alert definition",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access~1token~1%7Btoken_id%7D/delete/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested alert does not exist"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert/{alert_id}/toggle_enabled": {
      "post": {
        "description": "Enable this alert. Associated events will trigger alerts sent to configured webhook.\n",
        "summary": "Enable alert",
        "operationId": "postEnableAlert",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "description": "ID for Alert definition",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ms/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested alert does not exist"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert/{alert_id}/test": {
      "post": {
        "description": "Send test alert for this defined alert to configured webhook endpoint\n",
        "summary": "Send test alert",
        "operationId": "postTestAlert",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "description": "ID for Alert definition",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ms~1alert~1test/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                },
                "example": {
                  "error": {
                    "name": "APINotFoundError",
                    "log": "15640808375976073208002188741879242245537",
                    "message": "Requested alert does not exist"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packet_monitors": {
      "get": {
        "description": "[Beta] Retrieve all packet monitors",
        "summary": "Get all packet monitors",
        "operationId": "getPacketMonitors",
        "tags": [
          "Monitoring and Alerting"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PacketMonitorsListResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "title": "PacketMonitor",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of packet monitor. Must be conntrack for type=conntrack as only one conntrack monitor can run at a time",
                            "type": "string"
                          },
                          "type": {
                            "description": "conntrack, netflow or pcap",
                            "type": "string"
                          },
                          "interface": {
                            "type": "string"
                          },
                          "filter": {
                            "description": "filter strings are particular to the type of packet monitor. For instance, \"-p 8000\" for pcap",
                            "type": "string"
                          },
                          "duration": {
                            "description": "Indicates length of time to run capture for. Can be forever or some string parsable by the Linux date command",
                            "type": "string"
                          },
                          "destination": {
                            "description": "must be file if pcap or conntrack. Otherwise a host should be specified with the prefix \"host\". E.g. \"host:10.0.3.2:4000\"",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/packet_monitor": {
      "post": {
        "description": "[Beta] Define new packet monitor. Three types of packet monitors are supported: conntrack for connection tracking, netflow for Netflow formatted data, and pcap for local packet capture\n",
        "summary": "Create packet monitor",
        "operationId": "createPacketMonitor",
        "tags": [
          "Monitoring and Alerting"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreatePacketMonitorRequest",
                "type": "object",
                "required": [
                  "name",
                  "type",
                  "interface",
                  "filter",
                  "duration",
                  "destination"
                ],
                "properties": {
                  "name": {
                    "description": "Name of packet monitor. Must be conntrack for type=conntrack as only one conntrack monitor can run at a time",
                    "type": "string"
                  },
                  "type": {
                    "description": "conntrack, netflow or pcap",
                    "type": "string"
                  },
                  "interface": {
                    "type": "string"
                  },
                  "filter": {
                    "description": "filter strings are particular to the type of packet monitor. For instance, \"-p 8000\" for pcap. Can be empty string.",
                    "type": "string",
                    "nullable": true
                  },
                  "duration": {
                    "description": "Indicates length of time to run capture for. Can be forever or some string parsable by the Linux date command",
                    "type": "string"
                  },
                  "destination": {
                    "description": "must be file if pcap or conntrack. Otherwise a host should be specified with the prefix \"host\". E.g. \"host:10.0.3.2:4000\"",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PacketMonitorDetailResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "title": "PacketMonitor",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of packet monitor. Must be conntrack for type=conntrack as only one conntrack monitor can run at a time",
                          "type": "string"
                        },
                        "type": {
                          "description": "conntrack, netflow or pcap",
                          "type": "string"
                        },
                        "interface": {
                          "type": "string"
                        },
                        "filter": {
                          "description": "filter strings are particular to the type of packet monitor. For instance, \"-p 8000\" for pcap",
                          "type": "string"
                        },
                        "duration": {
                          "description": "Indicates length of time to run capture for. Can be forever or some string parsable by the Linux date command",
                          "type": "string"
                        },
                        "destination": {
                          "description": "must be file if pcap or conntrack. Otherwise a host should be specified with the prefix \"host\". E.g. \"host:10.0.3.2:4000\"",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1clientpack/get/responses/403/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          }
        }
      }
    },
    "/packet_monitor/{name}": {
      "get": {
        "description": "[Beta] Retrieve details for single Packet Monitor\n",
        "summary": "Get packet monitor",
        "operationId": "getPacketMonitor",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Unique name for packet monitor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1packet_monitor/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "description": "[Beta] Delete packet monitor\n",
        "summary": "Delete packet monitor",
        "operationId": "deletePacketMonitor",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Unique name for packet monitor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SimpleOutputResponse",
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean"
                        },
                        "output": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/packet_monitor/{name}/start": {
      "put": {
        "description": "[Beta] Start packet monitor\n",
        "summary": "Start packet monitor",
        "operationId": "putStartPacketMonitor",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Unique name for packet monitor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1packet_monitor~1%7Bname%7D/delete/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/packet_monitor/{name}/stop": {
      "put": {
        "description": "[Beta] Stop packet monitor\n",
        "summary": "Stop packet monitor",
        "operationId": "putStopPacketMonitor",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Unique name for packet monitor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1packet_monitor~1%7Bname%7D/delete/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/packet_monitor/{name}/download": {
      "get": {
        "description": "[Beta] Returns packet monitoring data archive.\n",
        "summary": "Download packet data",
        "operationId": "downloadPacketMonitorData",
        "tags": [
          "Monitoring and Alerting"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Unique name for packet monitor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packet data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1clientpacks~1%7Bclientpack_name%7D/get/responses/401"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
