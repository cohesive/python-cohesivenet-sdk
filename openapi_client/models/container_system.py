# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API for configuring and retrieving VNS3 controller  # noqa: E501

    The version of the OpenAPI document: 4.7
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContainerSystem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container_system_running': 'bool',
        'images_limit': 'int',
        'images_stored': 'int',
        'containers_limit': 'int',
        'containers_active': 'int',
        'container_network': 'str'
    }

    attribute_map = {
        'container_system_running': 'container_system_running',
        'images_limit': 'images_limit',
        'images_stored': 'images_stored',
        'containers_limit': 'containers_limit',
        'containers_active': 'containers_active',
        'container_network': 'container_network'
    }

    def __init__(self, container_system_running=None, images_limit=None, images_stored=None, containers_limit=None, containers_active=None, container_network=None):  # noqa: E501
        """ContainerSystem - a model defined in OpenAPI"""  # noqa: E501

        self._container_system_running = None
        self._images_limit = None
        self._images_stored = None
        self._containers_limit = None
        self._containers_active = None
        self._container_network = None
        self.discriminator = None

        if container_system_running is not None:
            self.container_system_running = container_system_running
        if images_limit is not None:
            self.images_limit = images_limit
        if images_stored is not None:
            self.images_stored = images_stored
        if containers_limit is not None:
            self.containers_limit = containers_limit
        if containers_active is not None:
            self.containers_active = containers_active
        if container_network is not None:
            self.container_network = container_network

    @property
    def container_system_running(self):
        """Gets the container_system_running of this ContainerSystem.  # noqa: E501


        :return: The container_system_running of this ContainerSystem.  # noqa: E501
        :rtype: bool
        """
        return self._container_system_running

    @container_system_running.setter
    def container_system_running(self, container_system_running):
        """Sets the container_system_running of this ContainerSystem.


        :param container_system_running: The container_system_running of this ContainerSystem.  # noqa: E501
        :type: bool
        """

        self._container_system_running = container_system_running

    @property
    def images_limit(self):
        """Gets the images_limit of this ContainerSystem.  # noqa: E501


        :return: The images_limit of this ContainerSystem.  # noqa: E501
        :rtype: int
        """
        return self._images_limit

    @images_limit.setter
    def images_limit(self, images_limit):
        """Sets the images_limit of this ContainerSystem.


        :param images_limit: The images_limit of this ContainerSystem.  # noqa: E501
        :type: int
        """

        self._images_limit = images_limit

    @property
    def images_stored(self):
        """Gets the images_stored of this ContainerSystem.  # noqa: E501


        :return: The images_stored of this ContainerSystem.  # noqa: E501
        :rtype: int
        """
        return self._images_stored

    @images_stored.setter
    def images_stored(self, images_stored):
        """Sets the images_stored of this ContainerSystem.


        :param images_stored: The images_stored of this ContainerSystem.  # noqa: E501
        :type: int
        """

        self._images_stored = images_stored

    @property
    def containers_limit(self):
        """Gets the containers_limit of this ContainerSystem.  # noqa: E501


        :return: The containers_limit of this ContainerSystem.  # noqa: E501
        :rtype: int
        """
        return self._containers_limit

    @containers_limit.setter
    def containers_limit(self, containers_limit):
        """Sets the containers_limit of this ContainerSystem.


        :param containers_limit: The containers_limit of this ContainerSystem.  # noqa: E501
        :type: int
        """

        self._containers_limit = containers_limit

    @property
    def containers_active(self):
        """Gets the containers_active of this ContainerSystem.  # noqa: E501


        :return: The containers_active of this ContainerSystem.  # noqa: E501
        :rtype: int
        """
        return self._containers_active

    @containers_active.setter
    def containers_active(self, containers_active):
        """Sets the containers_active of this ContainerSystem.


        :param containers_active: The containers_active of this ContainerSystem.  # noqa: E501
        :type: int
        """

        self._containers_active = containers_active

    @property
    def container_network(self):
        """Gets the container_network of this ContainerSystem.  # noqa: E501


        :return: The container_network of this ContainerSystem.  # noqa: E501
        :rtype: str
        """
        return self._container_network

    @container_network.setter
    def container_network(self, container_network):
        """Sets the container_network of this ContainerSystem.


        :param container_network: The container_network of this ContainerSystem.  # noqa: E501
        :type: str
        """

        self._container_network = container_network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
