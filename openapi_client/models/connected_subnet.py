# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API for configuring and retrieving VNS3 controller  # noqa: E501

    The version of the OpenAPI document: 4.7
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ConnectedSubnet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subnet': 'str',
        'network': 'str',
        'cidr_mask': 'str',
        'managerid': 'int',
        'netmask': 'str',
        'origin': 'str'
    }

    attribute_map = {
        'subnet': 'subnet',
        'network': 'network',
        'cidr_mask': 'cidr_mask',
        'managerid': 'managerid',
        'netmask': 'netmask',
        'origin': 'origin'
    }

    def __init__(self, subnet=None, network=None, cidr_mask=None, managerid=None, netmask=None, origin=None):  # noqa: E501
        """ConnectedSubnet - a model defined in OpenAPI"""  # noqa: E501

        self._subnet = None
        self._network = None
        self._cidr_mask = None
        self._managerid = None
        self._netmask = None
        self._origin = None
        self.discriminator = None

        if subnet is not None:
            self.subnet = subnet
        if network is not None:
            self.network = network
        if cidr_mask is not None:
            self.cidr_mask = cidr_mask
        if managerid is not None:
            self.managerid = managerid
        if netmask is not None:
            self.netmask = netmask
        if origin is not None:
            self.origin = origin

    @property
    def subnet(self):
        """Gets the subnet of this ConnectedSubnet.  # noqa: E501


        :return: The subnet of this ConnectedSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this ConnectedSubnet.


        :param subnet: The subnet of this ConnectedSubnet.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def network(self):
        """Gets the network of this ConnectedSubnet.  # noqa: E501


        :return: The network of this ConnectedSubnet.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConnectedSubnet.


        :param network: The network of this ConnectedSubnet.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def cidr_mask(self):
        """Gets the cidr_mask of this ConnectedSubnet.  # noqa: E501


        :return: The cidr_mask of this ConnectedSubnet.  # noqa: E501
        :rtype: str
        """
        return self._cidr_mask

    @cidr_mask.setter
    def cidr_mask(self, cidr_mask):
        """Sets the cidr_mask of this ConnectedSubnet.


        :param cidr_mask: The cidr_mask of this ConnectedSubnet.  # noqa: E501
        :type: str
        """

        self._cidr_mask = cidr_mask

    @property
    def managerid(self):
        """Gets the managerid of this ConnectedSubnet.  # noqa: E501


        :return: The managerid of this ConnectedSubnet.  # noqa: E501
        :rtype: int
        """
        return self._managerid

    @managerid.setter
    def managerid(self, managerid):
        """Sets the managerid of this ConnectedSubnet.


        :param managerid: The managerid of this ConnectedSubnet.  # noqa: E501
        :type: int
        """

        self._managerid = managerid

    @property
    def netmask(self):
        """Gets the netmask of this ConnectedSubnet.  # noqa: E501


        :return: The netmask of this ConnectedSubnet.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this ConnectedSubnet.


        :param netmask: The netmask of this ConnectedSubnet.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def origin(self):
        """Gets the origin of this ConnectedSubnet.  # noqa: E501

        ipsec, local_no_encryption, remote_manager, or ebgp  # noqa: E501

        :return: The origin of this ConnectedSubnet.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ConnectedSubnet.

        ipsec, local_no_encryption, remote_manager, or ebgp  # noqa: E501

        :param origin: The origin of this ConnectedSubnet.  # noqa: E501
        :type: str
        """

        self._origin = origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
