# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API for configuring and retrieving VNS3 controller  # noqa: E501

    The version of the OpenAPI document: 4.7
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CertificateDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_org': 'str',
        'key_country': 'str',
        'key_province': 'str',
        'key_city': 'str',
        'key_email': 'str'
    }

    attribute_map = {
        'key_org': 'key_org',
        'key_country': 'key_country',
        'key_province': 'key_province',
        'key_city': 'key_city',
        'key_email': 'key_email'
    }

    def __init__(self, key_org=None, key_country=None, key_province=None, key_city=None, key_email=None):  # noqa: E501
        """CertificateDetails - a model defined in OpenAPI"""  # noqa: E501

        self._key_org = None
        self._key_country = None
        self._key_province = None
        self._key_city = None
        self._key_email = None
        self.discriminator = None

        if key_org is not None:
            self.key_org = key_org
        if key_country is not None:
            self.key_country = key_country
        if key_province is not None:
            self.key_province = key_province
        if key_city is not None:
            self.key_city = key_city
        if key_email is not None:
            self.key_email = key_email

    @property
    def key_org(self):
        """Gets the key_org of this CertificateDetails.  # noqa: E501


        :return: The key_org of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._key_org

    @key_org.setter
    def key_org(self, key_org):
        """Sets the key_org of this CertificateDetails.


        :param key_org: The key_org of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._key_org = key_org

    @property
    def key_country(self):
        """Gets the key_country of this CertificateDetails.  # noqa: E501


        :return: The key_country of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._key_country

    @key_country.setter
    def key_country(self, key_country):
        """Sets the key_country of this CertificateDetails.


        :param key_country: The key_country of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._key_country = key_country

    @property
    def key_province(self):
        """Gets the key_province of this CertificateDetails.  # noqa: E501


        :return: The key_province of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._key_province

    @key_province.setter
    def key_province(self, key_province):
        """Sets the key_province of this CertificateDetails.


        :param key_province: The key_province of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._key_province = key_province

    @property
    def key_city(self):
        """Gets the key_city of this CertificateDetails.  # noqa: E501


        :return: The key_city of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._key_city

    @key_city.setter
    def key_city(self, key_city):
        """Sets the key_city of this CertificateDetails.


        :param key_city: The key_city of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._key_city = key_city

    @property
    def key_email(self):
        """Gets the key_email of this CertificateDetails.  # noqa: E501


        :return: The key_email of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._key_email

    @key_email.setter
    def key_email(self, key_email):
        """Sets the key_email of this CertificateDetails.


        :param key_email: The key_email of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._key_email = key_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
