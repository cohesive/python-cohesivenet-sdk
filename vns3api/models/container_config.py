# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API for configuring and retrieving VNS3 controller  # noqa: E501

    The version of the OpenAPI document: 4.7
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContainerConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entrypoint': 'str',
        'dns': 'str',
        'open_stdin': 'bool',
        'stdin_once': 'bool',
        'attach_stderr': 'bool',
        'attach_stdout': 'bool',
        'attach_stdin': 'bool',
        'env': 'dict(str, object)',
        'user': 'str',
        'tty': 'bool',
        'exposed_ports': 'dict(str, object)',
        'memory': 'int',
        'memory_swap': 'int',
        'volumes_from': 'str',
        'volumes': 'str',
        'cmd': 'str',
        'port_specs': 'dict(str, object)',
        'image': 'str',
        'working_dir': 'str',
        'cpu_shares': 'int',
        'network_disabled': 'bool',
        'domainname': 'str',
        'on_build': 'str',
        'hostname': 'str'
    }

    attribute_map = {
        'entrypoint': 'Entrypoint',
        'dns': 'Dns',
        'open_stdin': 'OpenStdin',
        'stdin_once': 'StdinOnce',
        'attach_stderr': 'AttachStderr',
        'attach_stdout': 'AttachStdout',
        'attach_stdin': 'AttachStdin',
        'env': 'Env',
        'user': 'User',
        'tty': 'Tty',
        'exposed_ports': 'ExposedPorts',
        'memory': 'Memory',
        'memory_swap': 'MemorySwap',
        'volumes_from': 'VolumesFrom',
        'volumes': 'Volumes',
        'cmd': 'Cmd',
        'port_specs': 'PortSpecs',
        'image': 'Image',
        'working_dir': 'WorkingDir',
        'cpu_shares': 'CpuShares',
        'network_disabled': 'NetworkDisabled',
        'domainname': 'Domainname',
        'on_build': 'OnBuild',
        'hostname': 'Hostname'
    }

    def __init__(self, entrypoint=None, dns=None, open_stdin=None, stdin_once=None, attach_stderr=None, attach_stdout=None, attach_stdin=None, env=None, user=None, tty=None, exposed_ports=None, memory=None, memory_swap=None, volumes_from=None, volumes=None, cmd=None, port_specs=None, image=None, working_dir=None, cpu_shares=None, network_disabled=None, domainname=None, on_build=None, hostname=None):  # noqa: E501
        """ContainerConfig - a model defined in OpenAPI"""  # noqa: E501

        self._entrypoint = None
        self._dns = None
        self._open_stdin = None
        self._stdin_once = None
        self._attach_stderr = None
        self._attach_stdout = None
        self._attach_stdin = None
        self._env = None
        self._user = None
        self._tty = None
        self._exposed_ports = None
        self._memory = None
        self._memory_swap = None
        self._volumes_from = None
        self._volumes = None
        self._cmd = None
        self._port_specs = None
        self._image = None
        self._working_dir = None
        self._cpu_shares = None
        self._network_disabled = None
        self._domainname = None
        self._on_build = None
        self._hostname = None
        self.discriminator = None

        self.entrypoint = entrypoint
        self.dns = dns
        if open_stdin is not None:
            self.open_stdin = open_stdin
        if stdin_once is not None:
            self.stdin_once = stdin_once
        if attach_stderr is not None:
            self.attach_stderr = attach_stderr
        if attach_stdout is not None:
            self.attach_stdout = attach_stdout
        if attach_stdin is not None:
            self.attach_stdin = attach_stdin
        self.env = env
        if user is not None:
            self.user = user
        if tty is not None:
            self.tty = tty
        self.exposed_ports = exposed_ports
        if memory is not None:
            self.memory = memory
        if memory_swap is not None:
            self.memory_swap = memory_swap
        if volumes_from is not None:
            self.volumes_from = volumes_from
        self.volumes = volumes
        self.cmd = cmd
        self.port_specs = port_specs
        if image is not None:
            self.image = image
        if working_dir is not None:
            self.working_dir = working_dir
        if cpu_shares is not None:
            self.cpu_shares = cpu_shares
        if network_disabled is not None:
            self.network_disabled = network_disabled
        if domainname is not None:
            self.domainname = domainname
        self.on_build = on_build
        if hostname is not None:
            self.hostname = hostname

    @property
    def entrypoint(self):
        """Gets the entrypoint of this ContainerConfig.  # noqa: E501


        :return: The entrypoint of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this ContainerConfig.


        :param entrypoint: The entrypoint of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._entrypoint = entrypoint

    @property
    def dns(self):
        """Gets the dns of this ContainerConfig.  # noqa: E501


        :return: The dns of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this ContainerConfig.


        :param dns: The dns of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._dns = dns

    @property
    def open_stdin(self):
        """Gets the open_stdin of this ContainerConfig.  # noqa: E501


        :return: The open_stdin of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin):
        """Sets the open_stdin of this ContainerConfig.


        :param open_stdin: The open_stdin of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._open_stdin = open_stdin

    @property
    def stdin_once(self):
        """Gets the stdin_once of this ContainerConfig.  # noqa: E501


        :return: The stdin_once of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._stdin_once

    @stdin_once.setter
    def stdin_once(self, stdin_once):
        """Sets the stdin_once of this ContainerConfig.


        :param stdin_once: The stdin_once of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._stdin_once = stdin_once

    @property
    def attach_stderr(self):
        """Gets the attach_stderr of this ContainerConfig.  # noqa: E501


        :return: The attach_stderr of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._attach_stderr

    @attach_stderr.setter
    def attach_stderr(self, attach_stderr):
        """Sets the attach_stderr of this ContainerConfig.


        :param attach_stderr: The attach_stderr of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._attach_stderr = attach_stderr

    @property
    def attach_stdout(self):
        """Gets the attach_stdout of this ContainerConfig.  # noqa: E501


        :return: The attach_stdout of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._attach_stdout

    @attach_stdout.setter
    def attach_stdout(self, attach_stdout):
        """Sets the attach_stdout of this ContainerConfig.


        :param attach_stdout: The attach_stdout of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._attach_stdout = attach_stdout

    @property
    def attach_stdin(self):
        """Gets the attach_stdin of this ContainerConfig.  # noqa: E501


        :return: The attach_stdin of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._attach_stdin

    @attach_stdin.setter
    def attach_stdin(self, attach_stdin):
        """Sets the attach_stdin of this ContainerConfig.


        :param attach_stdin: The attach_stdin of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._attach_stdin = attach_stdin

    @property
    def env(self):
        """Gets the env of this ContainerConfig.  # noqa: E501


        :return: The env of this ContainerConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContainerConfig.


        :param env: The env of this ContainerConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._env = env

    @property
    def user(self):
        """Gets the user of this ContainerConfig.  # noqa: E501


        :return: The user of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ContainerConfig.


        :param user: The user of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def tty(self):
        """Gets the tty of this ContainerConfig.  # noqa: E501


        :return: The tty of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this ContainerConfig.


        :param tty: The tty of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._tty = tty

    @property
    def exposed_ports(self):
        """Gets the exposed_ports of this ContainerConfig.  # noqa: E501


        :return: The exposed_ports of this ContainerConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports):
        """Sets the exposed_ports of this ContainerConfig.


        :param exposed_ports: The exposed_ports of this ContainerConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._exposed_ports = exposed_ports

    @property
    def memory(self):
        """Gets the memory of this ContainerConfig.  # noqa: E501


        :return: The memory of this ContainerConfig.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ContainerConfig.


        :param memory: The memory of this ContainerConfig.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def memory_swap(self):
        """Gets the memory_swap of this ContainerConfig.  # noqa: E501


        :return: The memory_swap of this ContainerConfig.  # noqa: E501
        :rtype: int
        """
        return self._memory_swap

    @memory_swap.setter
    def memory_swap(self, memory_swap):
        """Sets the memory_swap of this ContainerConfig.


        :param memory_swap: The memory_swap of this ContainerConfig.  # noqa: E501
        :type: int
        """

        self._memory_swap = memory_swap

    @property
    def volumes_from(self):
        """Gets the volumes_from of this ContainerConfig.  # noqa: E501


        :return: The volumes_from of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._volumes_from

    @volumes_from.setter
    def volumes_from(self, volumes_from):
        """Sets the volumes_from of this ContainerConfig.


        :param volumes_from: The volumes_from of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._volumes_from = volumes_from

    @property
    def volumes(self):
        """Gets the volumes of this ContainerConfig.  # noqa: E501


        :return: The volumes of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContainerConfig.


        :param volumes: The volumes of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._volumes = volumes

    @property
    def cmd(self):
        """Gets the cmd of this ContainerConfig.  # noqa: E501


        :return: The cmd of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ContainerConfig.


        :param cmd: The cmd of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._cmd = cmd

    @property
    def port_specs(self):
        """Gets the port_specs of this ContainerConfig.  # noqa: E501


        :return: The port_specs of this ContainerConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._port_specs

    @port_specs.setter
    def port_specs(self, port_specs):
        """Sets the port_specs of this ContainerConfig.


        :param port_specs: The port_specs of this ContainerConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._port_specs = port_specs

    @property
    def image(self):
        """Gets the image of this ContainerConfig.  # noqa: E501


        :return: The image of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainerConfig.


        :param image: The image of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def working_dir(self):
        """Gets the working_dir of this ContainerConfig.  # noqa: E501


        :return: The working_dir of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this ContainerConfig.


        :param working_dir: The working_dir of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._working_dir = working_dir

    @property
    def cpu_shares(self):
        """Gets the cpu_shares of this ContainerConfig.  # noqa: E501


        :return: The cpu_shares of this ContainerConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_shares

    @cpu_shares.setter
    def cpu_shares(self, cpu_shares):
        """Sets the cpu_shares of this ContainerConfig.


        :param cpu_shares: The cpu_shares of this ContainerConfig.  # noqa: E501
        :type: int
        """

        self._cpu_shares = cpu_shares

    @property
    def network_disabled(self):
        """Gets the network_disabled of this ContainerConfig.  # noqa: E501


        :return: The network_disabled of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._network_disabled

    @network_disabled.setter
    def network_disabled(self, network_disabled):
        """Sets the network_disabled of this ContainerConfig.


        :param network_disabled: The network_disabled of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._network_disabled = network_disabled

    @property
    def domainname(self):
        """Gets the domainname of this ContainerConfig.  # noqa: E501


        :return: The domainname of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._domainname

    @domainname.setter
    def domainname(self, domainname):
        """Sets the domainname of this ContainerConfig.


        :param domainname: The domainname of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._domainname = domainname

    @property
    def on_build(self):
        """Gets the on_build of this ContainerConfig.  # noqa: E501


        :return: The on_build of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._on_build

    @on_build.setter
    def on_build(self, on_build):
        """Sets the on_build of this ContainerConfig.


        :param on_build: The on_build of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._on_build = on_build

    @property
    def hostname(self):
        """Gets the hostname of this ContainerConfig.  # noqa: E501


        :return: The hostname of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ContainerConfig.


        :param hostname: The hostname of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
